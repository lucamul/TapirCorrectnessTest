// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: store/tapirstore/tapir-proto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_store_2ftapirstore_2ftapir_2dproto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_store_2ftapirstore_2ftapir_2dproto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "store/common/common-proto.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_store_2ftapirstore_2ftapir_2dproto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_store_2ftapirstore_2ftapir_2dproto_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_store_2ftapirstore_2ftapir_2dproto_2eproto;
namespace tapirstore {
namespace proto {
class AbortMessage;
class AbortMessageDefaultTypeInternal;
extern AbortMessageDefaultTypeInternal _AbortMessage_default_instance_;
class CommitMessage;
class CommitMessageDefaultTypeInternal;
extern CommitMessageDefaultTypeInternal _CommitMessage_default_instance_;
class GetMessage;
class GetMessageDefaultTypeInternal;
extern GetMessageDefaultTypeInternal _GetMessage_default_instance_;
class PrepareMessage;
class PrepareMessageDefaultTypeInternal;
extern PrepareMessageDefaultTypeInternal _PrepareMessage_default_instance_;
class Reply;
class ReplyDefaultTypeInternal;
extern ReplyDefaultTypeInternal _Reply_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
}  // namespace proto
}  // namespace tapirstore
PROTOBUF_NAMESPACE_OPEN
template<> ::tapirstore::proto::AbortMessage* Arena::CreateMaybeMessage<::tapirstore::proto::AbortMessage>(Arena*);
template<> ::tapirstore::proto::CommitMessage* Arena::CreateMaybeMessage<::tapirstore::proto::CommitMessage>(Arena*);
template<> ::tapirstore::proto::GetMessage* Arena::CreateMaybeMessage<::tapirstore::proto::GetMessage>(Arena*);
template<> ::tapirstore::proto::PrepareMessage* Arena::CreateMaybeMessage<::tapirstore::proto::PrepareMessage>(Arena*);
template<> ::tapirstore::proto::Reply* Arena::CreateMaybeMessage<::tapirstore::proto::Reply>(Arena*);
template<> ::tapirstore::proto::Request* Arena::CreateMaybeMessage<::tapirstore::proto::Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tapirstore {
namespace proto {

enum Request_Operation : int {
  Request_Operation_GET = 1,
  Request_Operation_PREPARE = 2,
  Request_Operation_COMMIT = 3,
  Request_Operation_ABORT = 4
};
bool Request_Operation_IsValid(int value);
constexpr Request_Operation Request_Operation_Operation_MIN = Request_Operation_GET;
constexpr Request_Operation Request_Operation_Operation_MAX = Request_Operation_ABORT;
constexpr int Request_Operation_Operation_ARRAYSIZE = Request_Operation_Operation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_Operation_descriptor();
template<typename T>
inline const std::string& Request_Operation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Request_Operation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Request_Operation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Request_Operation_descriptor(), enum_t_value);
}
inline bool Request_Operation_Parse(
    const std::string& name, Request_Operation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Request_Operation>(
    Request_Operation_descriptor(), name, value);
}
// ===================================================================

class GetMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tapirstore.proto.GetMessage) */ {
 public:
  inline GetMessage() : GetMessage(nullptr) {};
  virtual ~GetMessage();

  GetMessage(const GetMessage& from);
  GetMessage(GetMessage&& from) noexcept
    : GetMessage() {
    *this = ::std::move(from);
  }

  inline GetMessage& operator=(const GetMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMessage& operator=(GetMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMessage* internal_default_instance() {
    return reinterpret_cast<const GetMessage*>(
               &_GetMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetMessage& a, GetMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMessage* New() const final {
    return CreateMaybeMessage<GetMessage>(nullptr);
  }

  GetMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMessage& from);
  void MergeFrom(const GetMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tapirstore.proto.GetMessage";
  }
  protected:
  explicit GetMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_store_2ftapirstore_2ftapir_2dproto_2eproto);
    return ::descriptor_table_store_2ftapirstore_2ftapir_2dproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // required string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional .TimestampMessage timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::TimestampMessage& timestamp() const;
  ::TimestampMessage* release_timestamp();
  ::TimestampMessage* mutable_timestamp();
  void set_allocated_timestamp(::TimestampMessage* timestamp);
  private:
  const ::TimestampMessage& _internal_timestamp() const;
  ::TimestampMessage* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::TimestampMessage* timestamp);
  ::TimestampMessage* unsafe_arena_release_timestamp();

  // @@protoc_insertion_point(class_scope:tapirstore.proto.GetMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::TimestampMessage* timestamp_;
  friend struct ::TableStruct_store_2ftapirstore_2ftapir_2dproto_2eproto;
};
// -------------------------------------------------------------------

class PrepareMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tapirstore.proto.PrepareMessage) */ {
 public:
  inline PrepareMessage() : PrepareMessage(nullptr) {};
  virtual ~PrepareMessage();

  PrepareMessage(const PrepareMessage& from);
  PrepareMessage(PrepareMessage&& from) noexcept
    : PrepareMessage() {
    *this = ::std::move(from);
  }

  inline PrepareMessage& operator=(const PrepareMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareMessage& operator=(PrepareMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrepareMessage* internal_default_instance() {
    return reinterpret_cast<const PrepareMessage*>(
               &_PrepareMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PrepareMessage& a, PrepareMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareMessage* New() const final {
    return CreateMaybeMessage<PrepareMessage>(nullptr);
  }

  PrepareMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareMessage& from);
  void MergeFrom(const PrepareMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tapirstore.proto.PrepareMessage";
  }
  protected:
  explicit PrepareMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_store_2ftapirstore_2ftapir_2dproto_2eproto);
    return ::descriptor_table_store_2ftapirstore_2ftapir_2dproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxnFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // required .TransactionMessage txn = 1;
  bool has_txn() const;
  private:
  bool _internal_has_txn() const;
  public:
  void clear_txn();
  const ::TransactionMessage& txn() const;
  ::TransactionMessage* release_txn();
  ::TransactionMessage* mutable_txn();
  void set_allocated_txn(::TransactionMessage* txn);
  private:
  const ::TransactionMessage& _internal_txn() const;
  ::TransactionMessage* _internal_mutable_txn();
  public:
  void unsafe_arena_set_allocated_txn(
      ::TransactionMessage* txn);
  ::TransactionMessage* unsafe_arena_release_txn();

  // optional .TimestampMessage timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::TimestampMessage& timestamp() const;
  ::TimestampMessage* release_timestamp();
  ::TimestampMessage* mutable_timestamp();
  void set_allocated_timestamp(::TimestampMessage* timestamp);
  private:
  const ::TimestampMessage& _internal_timestamp() const;
  ::TimestampMessage* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::TimestampMessage* timestamp);
  ::TimestampMessage* unsafe_arena_release_timestamp();

  // @@protoc_insertion_point(class_scope:tapirstore.proto.PrepareMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TransactionMessage* txn_;
  ::TimestampMessage* timestamp_;
  friend struct ::TableStruct_store_2ftapirstore_2ftapir_2dproto_2eproto;
};
// -------------------------------------------------------------------

class CommitMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tapirstore.proto.CommitMessage) */ {
 public:
  inline CommitMessage() : CommitMessage(nullptr) {};
  virtual ~CommitMessage();

  CommitMessage(const CommitMessage& from);
  CommitMessage(CommitMessage&& from) noexcept
    : CommitMessage() {
    *this = ::std::move(from);
  }

  inline CommitMessage& operator=(const CommitMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommitMessage& operator=(CommitMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommitMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommitMessage* internal_default_instance() {
    return reinterpret_cast<const CommitMessage*>(
               &_CommitMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CommitMessage& a, CommitMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CommitMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommitMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommitMessage* New() const final {
    return CreateMaybeMessage<CommitMessage>(nullptr);
  }

  CommitMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommitMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommitMessage& from);
  void MergeFrom(const CommitMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommitMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tapirstore.proto.CommitMessage";
  }
  protected:
  explicit CommitMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_store_2ftapirstore_2ftapir_2dproto_2eproto);
    return ::descriptor_table_store_2ftapirstore_2ftapir_2dproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // required uint64 timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:tapirstore.proto.CommitMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  friend struct ::TableStruct_store_2ftapirstore_2ftapir_2dproto_2eproto;
};
// -------------------------------------------------------------------

class AbortMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tapirstore.proto.AbortMessage) */ {
 public:
  inline AbortMessage() : AbortMessage(nullptr) {};
  virtual ~AbortMessage();

  AbortMessage(const AbortMessage& from);
  AbortMessage(AbortMessage&& from) noexcept
    : AbortMessage() {
    *this = ::std::move(from);
  }

  inline AbortMessage& operator=(const AbortMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AbortMessage& operator=(AbortMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AbortMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AbortMessage* internal_default_instance() {
    return reinterpret_cast<const AbortMessage*>(
               &_AbortMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AbortMessage& a, AbortMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AbortMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AbortMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AbortMessage* New() const final {
    return CreateMaybeMessage<AbortMessage>(nullptr);
  }

  AbortMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AbortMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AbortMessage& from);
  void MergeFrom(const AbortMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AbortMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tapirstore.proto.AbortMessage";
  }
  protected:
  explicit AbortMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_store_2ftapirstore_2ftapir_2dproto_2eproto);
    return ::descriptor_table_store_2ftapirstore_2ftapir_2dproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxnFieldNumber = 1,
  };
  // required .TransactionMessage txn = 1;
  bool has_txn() const;
  private:
  bool _internal_has_txn() const;
  public:
  void clear_txn();
  const ::TransactionMessage& txn() const;
  ::TransactionMessage* release_txn();
  ::TransactionMessage* mutable_txn();
  void set_allocated_txn(::TransactionMessage* txn);
  private:
  const ::TransactionMessage& _internal_txn() const;
  ::TransactionMessage* _internal_mutable_txn();
  public:
  void unsafe_arena_set_allocated_txn(
      ::TransactionMessage* txn);
  ::TransactionMessage* unsafe_arena_release_txn();

  // @@protoc_insertion_point(class_scope:tapirstore.proto.AbortMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TransactionMessage* txn_;
  friend struct ::TableStruct_store_2ftapirstore_2ftapir_2dproto_2eproto;
};
// -------------------------------------------------------------------

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tapirstore.proto.Request) */ {
 public:
  inline Request() : Request(nullptr) {};
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tapirstore.proto.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_store_2ftapirstore_2ftapir_2dproto_2eproto);
    return ::descriptor_table_store_2ftapirstore_2ftapir_2dproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Request_Operation Operation;
  static constexpr Operation GET =
    Request_Operation_GET;
  static constexpr Operation PREPARE =
    Request_Operation_PREPARE;
  static constexpr Operation COMMIT =
    Request_Operation_COMMIT;
  static constexpr Operation ABORT =
    Request_Operation_ABORT;
  static inline bool Operation_IsValid(int value) {
    return Request_Operation_IsValid(value);
  }
  static constexpr Operation Operation_MIN =
    Request_Operation_Operation_MIN;
  static constexpr Operation Operation_MAX =
    Request_Operation_Operation_MAX;
  static constexpr int Operation_ARRAYSIZE =
    Request_Operation_Operation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Operation_descriptor() {
    return Request_Operation_descriptor();
  }
  template<typename T>
  static inline const std::string& Operation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Operation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Operation_Name.");
    return Request_Operation_Name(enum_t_value);
  }
  static inline bool Operation_Parse(const std::string& name,
      Operation* value) {
    return Request_Operation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGetFieldNumber = 3,
    kPrepareFieldNumber = 4,
    kCommitFieldNumber = 5,
    kAbortFieldNumber = 6,
    kTxnidFieldNumber = 2,
    kOpFieldNumber = 1,
  };
  // optional .tapirstore.proto.GetMessage get = 3;
  bool has_get() const;
  private:
  bool _internal_has_get() const;
  public:
  void clear_get();
  const ::tapirstore::proto::GetMessage& get() const;
  ::tapirstore::proto::GetMessage* release_get();
  ::tapirstore::proto::GetMessage* mutable_get();
  void set_allocated_get(::tapirstore::proto::GetMessage* get);
  private:
  const ::tapirstore::proto::GetMessage& _internal_get() const;
  ::tapirstore::proto::GetMessage* _internal_mutable_get();
  public:
  void unsafe_arena_set_allocated_get(
      ::tapirstore::proto::GetMessage* get);
  ::tapirstore::proto::GetMessage* unsafe_arena_release_get();

  // optional .tapirstore.proto.PrepareMessage prepare = 4;
  bool has_prepare() const;
  private:
  bool _internal_has_prepare() const;
  public:
  void clear_prepare();
  const ::tapirstore::proto::PrepareMessage& prepare() const;
  ::tapirstore::proto::PrepareMessage* release_prepare();
  ::tapirstore::proto::PrepareMessage* mutable_prepare();
  void set_allocated_prepare(::tapirstore::proto::PrepareMessage* prepare);
  private:
  const ::tapirstore::proto::PrepareMessage& _internal_prepare() const;
  ::tapirstore::proto::PrepareMessage* _internal_mutable_prepare();
  public:
  void unsafe_arena_set_allocated_prepare(
      ::tapirstore::proto::PrepareMessage* prepare);
  ::tapirstore::proto::PrepareMessage* unsafe_arena_release_prepare();

  // optional .tapirstore.proto.CommitMessage commit = 5;
  bool has_commit() const;
  private:
  bool _internal_has_commit() const;
  public:
  void clear_commit();
  const ::tapirstore::proto::CommitMessage& commit() const;
  ::tapirstore::proto::CommitMessage* release_commit();
  ::tapirstore::proto::CommitMessage* mutable_commit();
  void set_allocated_commit(::tapirstore::proto::CommitMessage* commit);
  private:
  const ::tapirstore::proto::CommitMessage& _internal_commit() const;
  ::tapirstore::proto::CommitMessage* _internal_mutable_commit();
  public:
  void unsafe_arena_set_allocated_commit(
      ::tapirstore::proto::CommitMessage* commit);
  ::tapirstore::proto::CommitMessage* unsafe_arena_release_commit();

  // optional .tapirstore.proto.AbortMessage abort = 6;
  bool has_abort() const;
  private:
  bool _internal_has_abort() const;
  public:
  void clear_abort();
  const ::tapirstore::proto::AbortMessage& abort() const;
  ::tapirstore::proto::AbortMessage* release_abort();
  ::tapirstore::proto::AbortMessage* mutable_abort();
  void set_allocated_abort(::tapirstore::proto::AbortMessage* abort);
  private:
  const ::tapirstore::proto::AbortMessage& _internal_abort() const;
  ::tapirstore::proto::AbortMessage* _internal_mutable_abort();
  public:
  void unsafe_arena_set_allocated_abort(
      ::tapirstore::proto::AbortMessage* abort);
  ::tapirstore::proto::AbortMessage* unsafe_arena_release_abort();

  // required uint64 txnid = 2;
  bool has_txnid() const;
  private:
  bool _internal_has_txnid() const;
  public:
  void clear_txnid();
  ::PROTOBUF_NAMESPACE_ID::uint64 txnid() const;
  void set_txnid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_txnid() const;
  void _internal_set_txnid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required .tapirstore.proto.Request.Operation op = 1;
  bool has_op() const;
  private:
  bool _internal_has_op() const;
  public:
  void clear_op();
  ::tapirstore::proto::Request_Operation op() const;
  void set_op(::tapirstore::proto::Request_Operation value);
  private:
  ::tapirstore::proto::Request_Operation _internal_op() const;
  void _internal_set_op(::tapirstore::proto::Request_Operation value);
  public:

  // @@protoc_insertion_point(class_scope:tapirstore.proto.Request)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::tapirstore::proto::GetMessage* get_;
  ::tapirstore::proto::PrepareMessage* prepare_;
  ::tapirstore::proto::CommitMessage* commit_;
  ::tapirstore::proto::AbortMessage* abort_;
  ::PROTOBUF_NAMESPACE_ID::uint64 txnid_;
  int op_;
  friend struct ::TableStruct_store_2ftapirstore_2ftapir_2dproto_2eproto;
};
// -------------------------------------------------------------------

class Reply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tapirstore.proto.Reply) */ {
 public:
  inline Reply() : Reply(nullptr) {};
  virtual ~Reply();

  Reply(const Reply& from);
  Reply(Reply&& from) noexcept
    : Reply() {
    *this = ::std::move(from);
  }

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reply& operator=(Reply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Reply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reply* internal_default_instance() {
    return reinterpret_cast<const Reply*>(
               &_Reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Reply& a, Reply& b) {
    a.Swap(&b);
  }
  inline void Swap(Reply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Reply* New() const final {
    return CreateMaybeMessage<Reply>(nullptr);
  }

  Reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Reply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Reply& from);
  void MergeFrom(const Reply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tapirstore.proto.Reply";
  }
  protected:
  explicit Reply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_store_2ftapirstore_2ftapir_2dproto_2eproto);
    return ::descriptor_table_store_2ftapirstore_2ftapir_2dproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional .TimestampMessage timestamp = 3;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::TimestampMessage& timestamp() const;
  ::TimestampMessage* release_timestamp();
  ::TimestampMessage* mutable_timestamp();
  void set_allocated_timestamp(::TimestampMessage* timestamp);
  private:
  const ::TimestampMessage& _internal_timestamp() const;
  ::TimestampMessage* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::TimestampMessage* timestamp);
  ::TimestampMessage* unsafe_arena_release_timestamp();

  // required int32 status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:tapirstore.proto.Reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::TimestampMessage* timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  friend struct ::TableStruct_store_2ftapirstore_2ftapir_2dproto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetMessage

// required string key = 1;
inline bool GetMessage::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetMessage::has_key() const {
  return _internal_has_key();
}
inline void GetMessage::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetMessage::key() const {
  // @@protoc_insertion_point(field_get:tapirstore.proto.GetMessage.key)
  return _internal_key();
}
inline void GetMessage::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:tapirstore.proto.GetMessage.key)
}
inline std::string* GetMessage::mutable_key() {
  // @@protoc_insertion_point(field_mutable:tapirstore.proto.GetMessage.key)
  return _internal_mutable_key();
}
inline const std::string& GetMessage::_internal_key() const {
  return key_.Get();
}
inline void GetMessage::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetMessage::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tapirstore.proto.GetMessage.key)
}
inline void GetMessage::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tapirstore.proto.GetMessage.key)
}
inline void GetMessage::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tapirstore.proto.GetMessage.key)
}
inline std::string* GetMessage::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetMessage::release_key() {
  // @@protoc_insertion_point(field_release:tapirstore.proto.GetMessage.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetMessage::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tapirstore.proto.GetMessage.key)
}
inline std::string* GetMessage::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tapirstore.proto.GetMessage.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetMessage::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tapirstore.proto.GetMessage.key)
}

// optional .TimestampMessage timestamp = 2;
inline bool GetMessage::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || timestamp_ != nullptr);
  return value;
}
inline bool GetMessage::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::TimestampMessage& GetMessage::_internal_timestamp() const {
  const ::TimestampMessage* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::TimestampMessage*>(
      &::_TimestampMessage_default_instance_);
}
inline const ::TimestampMessage& GetMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:tapirstore.proto.GetMessage.timestamp)
  return _internal_timestamp();
}
inline void GetMessage::unsafe_arena_set_allocated_timestamp(
    ::TimestampMessage* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tapirstore.proto.GetMessage.timestamp)
}
inline ::TimestampMessage* GetMessage::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TimestampMessage* GetMessage::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:tapirstore.proto.GetMessage.timestamp)
  _has_bits_[0] &= ~0x00000002u;
  ::TimestampMessage* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline ::TimestampMessage* GetMessage::_internal_mutable_timestamp() {
  _has_bits_[0] |= 0x00000002u;
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::TimestampMessage>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline ::TimestampMessage* GetMessage::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:tapirstore.proto.GetMessage.timestamp)
  return _internal_mutable_timestamp();
}
inline void GetMessage::set_allocated_timestamp(::TimestampMessage* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:tapirstore.proto.GetMessage.timestamp)
}

// -------------------------------------------------------------------

// PrepareMessage

// required .TransactionMessage txn = 1;
inline bool PrepareMessage::_internal_has_txn() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || txn_ != nullptr);
  return value;
}
inline bool PrepareMessage::has_txn() const {
  return _internal_has_txn();
}
inline const ::TransactionMessage& PrepareMessage::_internal_txn() const {
  const ::TransactionMessage* p = txn_;
  return p != nullptr ? *p : *reinterpret_cast<const ::TransactionMessage*>(
      &::_TransactionMessage_default_instance_);
}
inline const ::TransactionMessage& PrepareMessage::txn() const {
  // @@protoc_insertion_point(field_get:tapirstore.proto.PrepareMessage.txn)
  return _internal_txn();
}
inline void PrepareMessage::unsafe_arena_set_allocated_txn(
    ::TransactionMessage* txn) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(txn_);
  }
  txn_ = txn;
  if (txn) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tapirstore.proto.PrepareMessage.txn)
}
inline ::TransactionMessage* PrepareMessage::release_txn() {
  auto temp = unsafe_arena_release_txn();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TransactionMessage* PrepareMessage::unsafe_arena_release_txn() {
  // @@protoc_insertion_point(field_release:tapirstore.proto.PrepareMessage.txn)
  _has_bits_[0] &= ~0x00000001u;
  ::TransactionMessage* temp = txn_;
  txn_ = nullptr;
  return temp;
}
inline ::TransactionMessage* PrepareMessage::_internal_mutable_txn() {
  _has_bits_[0] |= 0x00000001u;
  if (txn_ == nullptr) {
    auto* p = CreateMaybeMessage<::TransactionMessage>(GetArena());
    txn_ = p;
  }
  return txn_;
}
inline ::TransactionMessage* PrepareMessage::mutable_txn() {
  // @@protoc_insertion_point(field_mutable:tapirstore.proto.PrepareMessage.txn)
  return _internal_mutable_txn();
}
inline void PrepareMessage::set_allocated_txn(::TransactionMessage* txn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(txn_);
  }
  if (txn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(txn)->GetArena();
    if (message_arena != submessage_arena) {
      txn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, txn, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  txn_ = txn;
  // @@protoc_insertion_point(field_set_allocated:tapirstore.proto.PrepareMessage.txn)
}

// optional .TimestampMessage timestamp = 2;
inline bool PrepareMessage::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || timestamp_ != nullptr);
  return value;
}
inline bool PrepareMessage::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::TimestampMessage& PrepareMessage::_internal_timestamp() const {
  const ::TimestampMessage* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::TimestampMessage*>(
      &::_TimestampMessage_default_instance_);
}
inline const ::TimestampMessage& PrepareMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:tapirstore.proto.PrepareMessage.timestamp)
  return _internal_timestamp();
}
inline void PrepareMessage::unsafe_arena_set_allocated_timestamp(
    ::TimestampMessage* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tapirstore.proto.PrepareMessage.timestamp)
}
inline ::TimestampMessage* PrepareMessage::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TimestampMessage* PrepareMessage::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:tapirstore.proto.PrepareMessage.timestamp)
  _has_bits_[0] &= ~0x00000002u;
  ::TimestampMessage* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline ::TimestampMessage* PrepareMessage::_internal_mutable_timestamp() {
  _has_bits_[0] |= 0x00000002u;
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::TimestampMessage>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline ::TimestampMessage* PrepareMessage::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:tapirstore.proto.PrepareMessage.timestamp)
  return _internal_mutable_timestamp();
}
inline void PrepareMessage::set_allocated_timestamp(::TimestampMessage* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:tapirstore.proto.PrepareMessage.timestamp)
}

// -------------------------------------------------------------------

// CommitMessage

// required uint64 timestamp = 1;
inline bool CommitMessage::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommitMessage::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CommitMessage::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommitMessage::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommitMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:tapirstore.proto.CommitMessage.timestamp)
  return _internal_timestamp();
}
inline void CommitMessage::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ = value;
}
inline void CommitMessage::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:tapirstore.proto.CommitMessage.timestamp)
}

// -------------------------------------------------------------------

// AbortMessage

// required .TransactionMessage txn = 1;
inline bool AbortMessage::_internal_has_txn() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || txn_ != nullptr);
  return value;
}
inline bool AbortMessage::has_txn() const {
  return _internal_has_txn();
}
inline const ::TransactionMessage& AbortMessage::_internal_txn() const {
  const ::TransactionMessage* p = txn_;
  return p != nullptr ? *p : *reinterpret_cast<const ::TransactionMessage*>(
      &::_TransactionMessage_default_instance_);
}
inline const ::TransactionMessage& AbortMessage::txn() const {
  // @@protoc_insertion_point(field_get:tapirstore.proto.AbortMessage.txn)
  return _internal_txn();
}
inline void AbortMessage::unsafe_arena_set_allocated_txn(
    ::TransactionMessage* txn) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(txn_);
  }
  txn_ = txn;
  if (txn) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tapirstore.proto.AbortMessage.txn)
}
inline ::TransactionMessage* AbortMessage::release_txn() {
  auto temp = unsafe_arena_release_txn();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TransactionMessage* AbortMessage::unsafe_arena_release_txn() {
  // @@protoc_insertion_point(field_release:tapirstore.proto.AbortMessage.txn)
  _has_bits_[0] &= ~0x00000001u;
  ::TransactionMessage* temp = txn_;
  txn_ = nullptr;
  return temp;
}
inline ::TransactionMessage* AbortMessage::_internal_mutable_txn() {
  _has_bits_[0] |= 0x00000001u;
  if (txn_ == nullptr) {
    auto* p = CreateMaybeMessage<::TransactionMessage>(GetArena());
    txn_ = p;
  }
  return txn_;
}
inline ::TransactionMessage* AbortMessage::mutable_txn() {
  // @@protoc_insertion_point(field_mutable:tapirstore.proto.AbortMessage.txn)
  return _internal_mutable_txn();
}
inline void AbortMessage::set_allocated_txn(::TransactionMessage* txn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(txn_);
  }
  if (txn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(txn)->GetArena();
    if (message_arena != submessage_arena) {
      txn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, txn, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  txn_ = txn;
  // @@protoc_insertion_point(field_set_allocated:tapirstore.proto.AbortMessage.txn)
}

// -------------------------------------------------------------------

// Request

// required .tapirstore.proto.Request.Operation op = 1;
inline bool Request::_internal_has_op() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Request::has_op() const {
  return _internal_has_op();
}
inline void Request::clear_op() {
  op_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::tapirstore::proto::Request_Operation Request::_internal_op() const {
  return static_cast< ::tapirstore::proto::Request_Operation >(op_);
}
inline ::tapirstore::proto::Request_Operation Request::op() const {
  // @@protoc_insertion_point(field_get:tapirstore.proto.Request.op)
  return _internal_op();
}
inline void Request::_internal_set_op(::tapirstore::proto::Request_Operation value) {
  assert(::tapirstore::proto::Request_Operation_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  op_ = value;
}
inline void Request::set_op(::tapirstore::proto::Request_Operation value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:tapirstore.proto.Request.op)
}

// required uint64 txnid = 2;
inline bool Request::_internal_has_txnid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Request::has_txnid() const {
  return _internal_has_txnid();
}
inline void Request::clear_txnid() {
  txnid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Request::_internal_txnid() const {
  return txnid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Request::txnid() const {
  // @@protoc_insertion_point(field_get:tapirstore.proto.Request.txnid)
  return _internal_txnid();
}
inline void Request::_internal_set_txnid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  txnid_ = value;
}
inline void Request::set_txnid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_txnid(value);
  // @@protoc_insertion_point(field_set:tapirstore.proto.Request.txnid)
}

// optional .tapirstore.proto.GetMessage get = 3;
inline bool Request::_internal_has_get() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || get_ != nullptr);
  return value;
}
inline bool Request::has_get() const {
  return _internal_has_get();
}
inline void Request::clear_get() {
  if (get_ != nullptr) get_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::tapirstore::proto::GetMessage& Request::_internal_get() const {
  const ::tapirstore::proto::GetMessage* p = get_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tapirstore::proto::GetMessage*>(
      &::tapirstore::proto::_GetMessage_default_instance_);
}
inline const ::tapirstore::proto::GetMessage& Request::get() const {
  // @@protoc_insertion_point(field_get:tapirstore.proto.Request.get)
  return _internal_get();
}
inline void Request::unsafe_arena_set_allocated_get(
    ::tapirstore::proto::GetMessage* get) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_);
  }
  get_ = get;
  if (get) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tapirstore.proto.Request.get)
}
inline ::tapirstore::proto::GetMessage* Request::release_get() {
  auto temp = unsafe_arena_release_get();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tapirstore::proto::GetMessage* Request::unsafe_arena_release_get() {
  // @@protoc_insertion_point(field_release:tapirstore.proto.Request.get)
  _has_bits_[0] &= ~0x00000001u;
  ::tapirstore::proto::GetMessage* temp = get_;
  get_ = nullptr;
  return temp;
}
inline ::tapirstore::proto::GetMessage* Request::_internal_mutable_get() {
  _has_bits_[0] |= 0x00000001u;
  if (get_ == nullptr) {
    auto* p = CreateMaybeMessage<::tapirstore::proto::GetMessage>(GetArena());
    get_ = p;
  }
  return get_;
}
inline ::tapirstore::proto::GetMessage* Request::mutable_get() {
  // @@protoc_insertion_point(field_mutable:tapirstore.proto.Request.get)
  return _internal_mutable_get();
}
inline void Request::set_allocated_get(::tapirstore::proto::GetMessage* get) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_;
  }
  if (get) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get);
    if (message_arena != submessage_arena) {
      get = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  get_ = get;
  // @@protoc_insertion_point(field_set_allocated:tapirstore.proto.Request.get)
}

// optional .tapirstore.proto.PrepareMessage prepare = 4;
inline bool Request::_internal_has_prepare() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || prepare_ != nullptr);
  return value;
}
inline bool Request::has_prepare() const {
  return _internal_has_prepare();
}
inline void Request::clear_prepare() {
  if (prepare_ != nullptr) prepare_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::tapirstore::proto::PrepareMessage& Request::_internal_prepare() const {
  const ::tapirstore::proto::PrepareMessage* p = prepare_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tapirstore::proto::PrepareMessage*>(
      &::tapirstore::proto::_PrepareMessage_default_instance_);
}
inline const ::tapirstore::proto::PrepareMessage& Request::prepare() const {
  // @@protoc_insertion_point(field_get:tapirstore.proto.Request.prepare)
  return _internal_prepare();
}
inline void Request::unsafe_arena_set_allocated_prepare(
    ::tapirstore::proto::PrepareMessage* prepare) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prepare_);
  }
  prepare_ = prepare;
  if (prepare) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tapirstore.proto.Request.prepare)
}
inline ::tapirstore::proto::PrepareMessage* Request::release_prepare() {
  auto temp = unsafe_arena_release_prepare();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tapirstore::proto::PrepareMessage* Request::unsafe_arena_release_prepare() {
  // @@protoc_insertion_point(field_release:tapirstore.proto.Request.prepare)
  _has_bits_[0] &= ~0x00000002u;
  ::tapirstore::proto::PrepareMessage* temp = prepare_;
  prepare_ = nullptr;
  return temp;
}
inline ::tapirstore::proto::PrepareMessage* Request::_internal_mutable_prepare() {
  _has_bits_[0] |= 0x00000002u;
  if (prepare_ == nullptr) {
    auto* p = CreateMaybeMessage<::tapirstore::proto::PrepareMessage>(GetArena());
    prepare_ = p;
  }
  return prepare_;
}
inline ::tapirstore::proto::PrepareMessage* Request::mutable_prepare() {
  // @@protoc_insertion_point(field_mutable:tapirstore.proto.Request.prepare)
  return _internal_mutable_prepare();
}
inline void Request::set_allocated_prepare(::tapirstore::proto::PrepareMessage* prepare) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete prepare_;
  }
  if (prepare) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(prepare);
    if (message_arena != submessage_arena) {
      prepare = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prepare, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  prepare_ = prepare;
  // @@protoc_insertion_point(field_set_allocated:tapirstore.proto.Request.prepare)
}

// optional .tapirstore.proto.CommitMessage commit = 5;
inline bool Request::_internal_has_commit() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || commit_ != nullptr);
  return value;
}
inline bool Request::has_commit() const {
  return _internal_has_commit();
}
inline void Request::clear_commit() {
  if (commit_ != nullptr) commit_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::tapirstore::proto::CommitMessage& Request::_internal_commit() const {
  const ::tapirstore::proto::CommitMessage* p = commit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tapirstore::proto::CommitMessage*>(
      &::tapirstore::proto::_CommitMessage_default_instance_);
}
inline const ::tapirstore::proto::CommitMessage& Request::commit() const {
  // @@protoc_insertion_point(field_get:tapirstore.proto.Request.commit)
  return _internal_commit();
}
inline void Request::unsafe_arena_set_allocated_commit(
    ::tapirstore::proto::CommitMessage* commit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commit_);
  }
  commit_ = commit;
  if (commit) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tapirstore.proto.Request.commit)
}
inline ::tapirstore::proto::CommitMessage* Request::release_commit() {
  auto temp = unsafe_arena_release_commit();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tapirstore::proto::CommitMessage* Request::unsafe_arena_release_commit() {
  // @@protoc_insertion_point(field_release:tapirstore.proto.Request.commit)
  _has_bits_[0] &= ~0x00000004u;
  ::tapirstore::proto::CommitMessage* temp = commit_;
  commit_ = nullptr;
  return temp;
}
inline ::tapirstore::proto::CommitMessage* Request::_internal_mutable_commit() {
  _has_bits_[0] |= 0x00000004u;
  if (commit_ == nullptr) {
    auto* p = CreateMaybeMessage<::tapirstore::proto::CommitMessage>(GetArena());
    commit_ = p;
  }
  return commit_;
}
inline ::tapirstore::proto::CommitMessage* Request::mutable_commit() {
  // @@protoc_insertion_point(field_mutable:tapirstore.proto.Request.commit)
  return _internal_mutable_commit();
}
inline void Request::set_allocated_commit(::tapirstore::proto::CommitMessage* commit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete commit_;
  }
  if (commit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(commit);
    if (message_arena != submessage_arena) {
      commit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commit, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  commit_ = commit;
  // @@protoc_insertion_point(field_set_allocated:tapirstore.proto.Request.commit)
}

// optional .tapirstore.proto.AbortMessage abort = 6;
inline bool Request::_internal_has_abort() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || abort_ != nullptr);
  return value;
}
inline bool Request::has_abort() const {
  return _internal_has_abort();
}
inline void Request::clear_abort() {
  if (abort_ != nullptr) abort_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::tapirstore::proto::AbortMessage& Request::_internal_abort() const {
  const ::tapirstore::proto::AbortMessage* p = abort_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tapirstore::proto::AbortMessage*>(
      &::tapirstore::proto::_AbortMessage_default_instance_);
}
inline const ::tapirstore::proto::AbortMessage& Request::abort() const {
  // @@protoc_insertion_point(field_get:tapirstore.proto.Request.abort)
  return _internal_abort();
}
inline void Request::unsafe_arena_set_allocated_abort(
    ::tapirstore::proto::AbortMessage* abort) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(abort_);
  }
  abort_ = abort;
  if (abort) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tapirstore.proto.Request.abort)
}
inline ::tapirstore::proto::AbortMessage* Request::release_abort() {
  auto temp = unsafe_arena_release_abort();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tapirstore::proto::AbortMessage* Request::unsafe_arena_release_abort() {
  // @@protoc_insertion_point(field_release:tapirstore.proto.Request.abort)
  _has_bits_[0] &= ~0x00000008u;
  ::tapirstore::proto::AbortMessage* temp = abort_;
  abort_ = nullptr;
  return temp;
}
inline ::tapirstore::proto::AbortMessage* Request::_internal_mutable_abort() {
  _has_bits_[0] |= 0x00000008u;
  if (abort_ == nullptr) {
    auto* p = CreateMaybeMessage<::tapirstore::proto::AbortMessage>(GetArena());
    abort_ = p;
  }
  return abort_;
}
inline ::tapirstore::proto::AbortMessage* Request::mutable_abort() {
  // @@protoc_insertion_point(field_mutable:tapirstore.proto.Request.abort)
  return _internal_mutable_abort();
}
inline void Request::set_allocated_abort(::tapirstore::proto::AbortMessage* abort) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete abort_;
  }
  if (abort) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(abort);
    if (message_arena != submessage_arena) {
      abort = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, abort, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  abort_ = abort;
  // @@protoc_insertion_point(field_set_allocated:tapirstore.proto.Request.abort)
}

// -------------------------------------------------------------------

// Reply

// required int32 status = 1;
inline bool Reply::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Reply::has_status() const {
  return _internal_has_status();
}
inline void Reply::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Reply::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Reply::status() const {
  // @@protoc_insertion_point(field_get:tapirstore.proto.Reply.status)
  return _internal_status();
}
inline void Reply::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  status_ = value;
}
inline void Reply::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:tapirstore.proto.Reply.status)
}

// optional string value = 2;
inline bool Reply::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Reply::has_value() const {
  return _internal_has_value();
}
inline void Reply::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Reply::value() const {
  // @@protoc_insertion_point(field_get:tapirstore.proto.Reply.value)
  return _internal_value();
}
inline void Reply::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:tapirstore.proto.Reply.value)
}
inline std::string* Reply::mutable_value() {
  // @@protoc_insertion_point(field_mutable:tapirstore.proto.Reply.value)
  return _internal_mutable_value();
}
inline const std::string& Reply::_internal_value() const {
  return value_.Get();
}
inline void Reply::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Reply::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tapirstore.proto.Reply.value)
}
inline void Reply::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tapirstore.proto.Reply.value)
}
inline void Reply::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tapirstore.proto.Reply.value)
}
inline std::string* Reply::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Reply::release_value() {
  // @@protoc_insertion_point(field_release:tapirstore.proto.Reply.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Reply::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tapirstore.proto.Reply.value)
}
inline std::string* Reply::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tapirstore.proto.Reply.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Reply::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tapirstore.proto.Reply.value)
}

// optional .TimestampMessage timestamp = 3;
inline bool Reply::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || timestamp_ != nullptr);
  return value;
}
inline bool Reply::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::TimestampMessage& Reply::_internal_timestamp() const {
  const ::TimestampMessage* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::TimestampMessage*>(
      &::_TimestampMessage_default_instance_);
}
inline const ::TimestampMessage& Reply::timestamp() const {
  // @@protoc_insertion_point(field_get:tapirstore.proto.Reply.timestamp)
  return _internal_timestamp();
}
inline void Reply::unsafe_arena_set_allocated_timestamp(
    ::TimestampMessage* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tapirstore.proto.Reply.timestamp)
}
inline ::TimestampMessage* Reply::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TimestampMessage* Reply::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:tapirstore.proto.Reply.timestamp)
  _has_bits_[0] &= ~0x00000002u;
  ::TimestampMessage* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline ::TimestampMessage* Reply::_internal_mutable_timestamp() {
  _has_bits_[0] |= 0x00000002u;
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::TimestampMessage>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline ::TimestampMessage* Reply::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:tapirstore.proto.Reply.timestamp)
  return _internal_mutable_timestamp();
}
inline void Reply::set_allocated_timestamp(::TimestampMessage* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:tapirstore.proto.Reply.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tapirstore

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tapirstore::proto::Request_Operation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tapirstore::proto::Request_Operation>() {
  return ::tapirstore::proto::Request_Operation_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_store_2ftapirstore_2ftapir_2dproto_2eproto
