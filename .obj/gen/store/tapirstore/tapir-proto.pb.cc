// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: store/tapirstore/tapir-proto.proto

#include "store/tapirstore/tapir-proto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_store_2fcommon_2fcommon_2dproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimestampMessage_store_2fcommon_2fcommon_2dproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_store_2fcommon_2fcommon_2dproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TransactionMessage_store_2fcommon_2fcommon_2dproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_store_2ftapirstore_2ftapir_2dproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AbortMessage_store_2ftapirstore_2ftapir_2dproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_store_2ftapirstore_2ftapir_2dproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommitMessage_store_2ftapirstore_2ftapir_2dproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_store_2ftapirstore_2ftapir_2dproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetMessage_store_2ftapirstore_2ftapir_2dproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_store_2ftapirstore_2ftapir_2dproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PrepareMessage_store_2ftapirstore_2ftapir_2dproto_2eproto;
namespace tapirstore {
namespace proto {
class GetMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMessage> _instance;
} _GetMessage_default_instance_;
class PrepareMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareMessage> _instance;
} _PrepareMessage_default_instance_;
class CommitMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommitMessage> _instance;
} _CommitMessage_default_instance_;
class AbortMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AbortMessage> _instance;
} _AbortMessage_default_instance_;
class RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request> _instance;
} _Request_default_instance_;
class ReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Reply> _instance;
} _Reply_default_instance_;
}  // namespace proto
}  // namespace tapirstore
static void InitDefaultsscc_info_AbortMessage_store_2ftapirstore_2ftapir_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tapirstore::proto::_AbortMessage_default_instance_;
    new (ptr) ::tapirstore::proto::AbortMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tapirstore::proto::AbortMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AbortMessage_store_2ftapirstore_2ftapir_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AbortMessage_store_2ftapirstore_2ftapir_2dproto_2eproto}, {
      &scc_info_TransactionMessage_store_2fcommon_2fcommon_2dproto_2eproto.base,}};

static void InitDefaultsscc_info_CommitMessage_store_2ftapirstore_2ftapir_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tapirstore::proto::_CommitMessage_default_instance_;
    new (ptr) ::tapirstore::proto::CommitMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tapirstore::proto::CommitMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommitMessage_store_2ftapirstore_2ftapir_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommitMessage_store_2ftapirstore_2ftapir_2dproto_2eproto}, {}};

static void InitDefaultsscc_info_GetMessage_store_2ftapirstore_2ftapir_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tapirstore::proto::_GetMessage_default_instance_;
    new (ptr) ::tapirstore::proto::GetMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tapirstore::proto::GetMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetMessage_store_2ftapirstore_2ftapir_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetMessage_store_2ftapirstore_2ftapir_2dproto_2eproto}, {
      &scc_info_TimestampMessage_store_2fcommon_2fcommon_2dproto_2eproto.base,}};

static void InitDefaultsscc_info_PrepareMessage_store_2ftapirstore_2ftapir_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tapirstore::proto::_PrepareMessage_default_instance_;
    new (ptr) ::tapirstore::proto::PrepareMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tapirstore::proto::PrepareMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PrepareMessage_store_2ftapirstore_2ftapir_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PrepareMessage_store_2ftapirstore_2ftapir_2dproto_2eproto}, {
      &scc_info_TransactionMessage_store_2fcommon_2fcommon_2dproto_2eproto.base,
      &scc_info_TimestampMessage_store_2fcommon_2fcommon_2dproto_2eproto.base,}};

static void InitDefaultsscc_info_Reply_store_2ftapirstore_2ftapir_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tapirstore::proto::_Reply_default_instance_;
    new (ptr) ::tapirstore::proto::Reply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tapirstore::proto::Reply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Reply_store_2ftapirstore_2ftapir_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Reply_store_2ftapirstore_2ftapir_2dproto_2eproto}, {
      &scc_info_TimestampMessage_store_2fcommon_2fcommon_2dproto_2eproto.base,}};

static void InitDefaultsscc_info_Request_store_2ftapirstore_2ftapir_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tapirstore::proto::_Request_default_instance_;
    new (ptr) ::tapirstore::proto::Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tapirstore::proto::Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Request_store_2ftapirstore_2ftapir_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Request_store_2ftapirstore_2ftapir_2dproto_2eproto}, {
      &scc_info_GetMessage_store_2ftapirstore_2ftapir_2dproto_2eproto.base,
      &scc_info_PrepareMessage_store_2ftapirstore_2ftapir_2dproto_2eproto.base,
      &scc_info_CommitMessage_store_2ftapirstore_2ftapir_2dproto_2eproto.base,
      &scc_info_AbortMessage_store_2ftapirstore_2ftapir_2dproto_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_store_2ftapirstore_2ftapir_2dproto_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_store_2ftapirstore_2ftapir_2dproto_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_store_2ftapirstore_2ftapir_2dproto_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_store_2ftapirstore_2ftapir_2dproto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tapirstore::proto::GetMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tapirstore::proto::GetMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tapirstore::proto::GetMessage, key_),
  PROTOBUF_FIELD_OFFSET(::tapirstore::proto::GetMessage, timestamp_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tapirstore::proto::PrepareMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tapirstore::proto::PrepareMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tapirstore::proto::PrepareMessage, txn_),
  PROTOBUF_FIELD_OFFSET(::tapirstore::proto::PrepareMessage, timestamp_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tapirstore::proto::CommitMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tapirstore::proto::CommitMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tapirstore::proto::CommitMessage, timestamp_),
  0,
  PROTOBUF_FIELD_OFFSET(::tapirstore::proto::AbortMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tapirstore::proto::AbortMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tapirstore::proto::AbortMessage, txn_),
  0,
  PROTOBUF_FIELD_OFFSET(::tapirstore::proto::Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tapirstore::proto::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tapirstore::proto::Request, op_),
  PROTOBUF_FIELD_OFFSET(::tapirstore::proto::Request, txnid_),
  PROTOBUF_FIELD_OFFSET(::tapirstore::proto::Request, get_),
  PROTOBUF_FIELD_OFFSET(::tapirstore::proto::Request, prepare_),
  PROTOBUF_FIELD_OFFSET(::tapirstore::proto::Request, commit_),
  PROTOBUF_FIELD_OFFSET(::tapirstore::proto::Request, abort_),
  5,
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::tapirstore::proto::Reply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tapirstore::proto::Reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tapirstore::proto::Reply, status_),
  PROTOBUF_FIELD_OFFSET(::tapirstore::proto::Reply, value_),
  PROTOBUF_FIELD_OFFSET(::tapirstore::proto::Reply, timestamp_),
  2,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::tapirstore::proto::GetMessage)},
  { 9, 16, sizeof(::tapirstore::proto::PrepareMessage)},
  { 18, 24, sizeof(::tapirstore::proto::CommitMessage)},
  { 25, 31, sizeof(::tapirstore::proto::AbortMessage)},
  { 32, 43, sizeof(::tapirstore::proto::Request)},
  { 49, 57, sizeof(::tapirstore::proto::Reply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tapirstore::proto::_GetMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tapirstore::proto::_PrepareMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tapirstore::proto::_CommitMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tapirstore::proto::_AbortMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tapirstore::proto::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tapirstore::proto::_Reply_default_instance_),
};

const char descriptor_table_protodef_store_2ftapirstore_2ftapir_2dproto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"store/tapirstore/tapir-proto.proto\022\020ta"
  "pirstore.proto\032\037store/common/common-prot"
  "o.proto\"\?\n\nGetMessage\022\013\n\003key\030\001 \002(\t\022$\n\tti"
  "mestamp\030\002 \001(\0132\021.TimestampMessage\"X\n\016Prep"
  "areMessage\022 \n\003txn\030\001 \002(\0132\023.TransactionMes"
  "sage\022$\n\ttimestamp\030\002 \001(\0132\021.TimestampMessa"
  "ge\"\"\n\rCommitMessage\022\021\n\ttimestamp\030\001 \002(\004\"0"
  "\n\014AbortMessage\022 \n\003txn\030\001 \002(\0132\023.Transactio"
  "nMessage\"\301\002\n\007Request\022/\n\002op\030\001 \002(\0162#.tapir"
  "store.proto.Request.Operation\022\r\n\005txnid\030\002"
  " \002(\004\022)\n\003get\030\003 \001(\0132\034.tapirstore.proto.Get"
  "Message\0221\n\007prepare\030\004 \001(\0132 .tapirstore.pr"
  "oto.PrepareMessage\022/\n\006commit\030\005 \001(\0132\037.tap"
  "irstore.proto.CommitMessage\022-\n\005abort\030\006 \001"
  "(\0132\036.tapirstore.proto.AbortMessage\"8\n\tOp"
  "eration\022\007\n\003GET\020\001\022\013\n\007PREPARE\020\002\022\n\n\006COMMIT\020"
  "\003\022\t\n\005ABORT\020\004\"L\n\005Reply\022\016\n\006status\030\001 \002(\005\022\r\n"
  "\005value\030\002 \001(\t\022$\n\ttimestamp\030\003 \001(\0132\021.Timest"
  "ampMessage"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_store_2ftapirstore_2ftapir_2dproto_2eproto_deps[1] = {
  &::descriptor_table_store_2fcommon_2fcommon_2dproto_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_store_2ftapirstore_2ftapir_2dproto_2eproto_sccs[6] = {
  &scc_info_AbortMessage_store_2ftapirstore_2ftapir_2dproto_2eproto.base,
  &scc_info_CommitMessage_store_2ftapirstore_2ftapir_2dproto_2eproto.base,
  &scc_info_GetMessage_store_2ftapirstore_2ftapir_2dproto_2eproto.base,
  &scc_info_PrepareMessage_store_2ftapirstore_2ftapir_2dproto_2eproto.base,
  &scc_info_Reply_store_2ftapirstore_2ftapir_2dproto_2eproto.base,
  &scc_info_Request_store_2ftapirstore_2ftapir_2dproto_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_store_2ftapirstore_2ftapir_2dproto_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_store_2ftapirstore_2ftapir_2dproto_2eproto = {
  false, false, descriptor_table_protodef_store_2ftapirstore_2ftapir_2dproto_2eproto, "store/tapirstore/tapir-proto.proto", 730,
  &descriptor_table_store_2ftapirstore_2ftapir_2dproto_2eproto_once, descriptor_table_store_2ftapirstore_2ftapir_2dproto_2eproto_sccs, descriptor_table_store_2ftapirstore_2ftapir_2dproto_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_store_2ftapirstore_2ftapir_2dproto_2eproto::offsets,
  file_level_metadata_store_2ftapirstore_2ftapir_2dproto_2eproto, 6, file_level_enum_descriptors_store_2ftapirstore_2ftapir_2dproto_2eproto, file_level_service_descriptors_store_2ftapirstore_2ftapir_2dproto_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_store_2ftapirstore_2ftapir_2dproto_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_store_2ftapirstore_2ftapir_2dproto_2eproto)), true);
namespace tapirstore {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_Operation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_store_2ftapirstore_2ftapir_2dproto_2eproto);
  return file_level_enum_descriptors_store_2ftapirstore_2ftapir_2dproto_2eproto[0];
}
bool Request_Operation_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Request_Operation Request::GET;
constexpr Request_Operation Request::PREPARE;
constexpr Request_Operation Request::COMMIT;
constexpr Request_Operation Request::ABORT;
constexpr Request_Operation Request::Operation_MIN;
constexpr Request_Operation Request::Operation_MAX;
constexpr int Request::Operation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void GetMessage::InitAsDefaultInstance() {
  ::tapirstore::proto::_GetMessage_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::TimestampMessage*>(
      ::TimestampMessage::internal_default_instance());
}
class GetMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GetMessage>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TimestampMessage& timestamp(const GetMessage* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TimestampMessage&
GetMessage::_Internal::timestamp(const GetMessage* msg) {
  return *msg->timestamp_;
}
void GetMessage::clear_timestamp() {
  if (timestamp_ != nullptr) timestamp_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GetMessage::GetMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tapirstore.proto.GetMessage)
}
GetMessage::GetMessage(const GetMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::TimestampMessage(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tapirstore.proto.GetMessage)
}

void GetMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMessage_store_2ftapirstore_2ftapir_2dproto_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = nullptr;
}

GetMessage::~GetMessage() {
  // @@protoc_insertion_point(destructor:tapirstore.proto.GetMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void GetMessage::ArenaDtor(void* object) {
  GetMessage* _this = reinterpret_cast< GetMessage* >(object);
  (void)_this;
}
void GetMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMessage& GetMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMessage_store_2ftapirstore_2ftapir_2dproto_2eproto.base);
  return *internal_default_instance();
}


void GetMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tapirstore.proto.GetMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(timestamp_ != nullptr);
      timestamp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tapirstore.proto.GetMessage.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TimestampMessage timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tapirstore.proto.GetMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tapirstore.proto.GetMessage.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional .TimestampMessage timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tapirstore.proto.GetMessage)
  return target;
}

size_t GetMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tapirstore.proto.GetMessage)
  size_t total_size = 0;

  // required string key = 1;
  if (_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TimestampMessage timestamp = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tapirstore.proto.GetMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tapirstore.proto.GetMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tapirstore.proto.GetMessage)
    MergeFrom(*source);
  }
}

void GetMessage::MergeFrom(const GetMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tapirstore.proto.GetMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_timestamp()->::TimestampMessage::MergeFrom(from._internal_timestamp());
    }
  }
}

void GetMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tapirstore.proto.GetMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMessage::CopyFrom(const GetMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tapirstore.proto.GetMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_timestamp()) {
    if (!timestamp_->IsInitialized()) return false;
  }
  return true;
}

void GetMessage::InternalSwap(GetMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrepareMessage::InitAsDefaultInstance() {
  ::tapirstore::proto::_PrepareMessage_default_instance_._instance.get_mutable()->txn_ = const_cast< ::TransactionMessage*>(
      ::TransactionMessage::internal_default_instance());
  ::tapirstore::proto::_PrepareMessage_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::TimestampMessage*>(
      ::TimestampMessage::internal_default_instance());
}
class PrepareMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<PrepareMessage>()._has_bits_);
  static const ::TransactionMessage& txn(const PrepareMessage* msg);
  static void set_has_txn(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TimestampMessage& timestamp(const PrepareMessage* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TransactionMessage&
PrepareMessage::_Internal::txn(const PrepareMessage* msg) {
  return *msg->txn_;
}
const ::TimestampMessage&
PrepareMessage::_Internal::timestamp(const PrepareMessage* msg) {
  return *msg->timestamp_;
}
void PrepareMessage::clear_txn() {
  if (txn_ != nullptr) txn_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void PrepareMessage::clear_timestamp() {
  if (timestamp_ != nullptr) timestamp_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
PrepareMessage::PrepareMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tapirstore.proto.PrepareMessage)
}
PrepareMessage::PrepareMessage(const PrepareMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_txn()) {
    txn_ = new ::TransactionMessage(*from.txn_);
  } else {
    txn_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::TimestampMessage(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tapirstore.proto.PrepareMessage)
}

void PrepareMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareMessage_store_2ftapirstore_2ftapir_2dproto_2eproto.base);
  ::memset(&txn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&txn_)) + sizeof(timestamp_));
}

PrepareMessage::~PrepareMessage() {
  // @@protoc_insertion_point(destructor:tapirstore.proto.PrepareMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete txn_;
  if (this != internal_default_instance()) delete timestamp_;
}

void PrepareMessage::ArenaDtor(void* object) {
  PrepareMessage* _this = reinterpret_cast< PrepareMessage* >(object);
  (void)_this;
}
void PrepareMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareMessage& PrepareMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareMessage_store_2ftapirstore_2ftapir_2dproto_2eproto.base);
  return *internal_default_instance();
}


void PrepareMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tapirstore.proto.PrepareMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(txn_ != nullptr);
      txn_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(timestamp_ != nullptr);
      timestamp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .TransactionMessage txn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_txn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TimestampMessage timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tapirstore.proto.PrepareMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TransactionMessage txn = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::txn(this), target, stream);
  }

  // optional .TimestampMessage timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tapirstore.proto.PrepareMessage)
  return target;
}

size_t PrepareMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tapirstore.proto.PrepareMessage)
  size_t total_size = 0;

  // required .TransactionMessage txn = 1;
  if (_internal_has_txn()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *txn_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TimestampMessage timestamp = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tapirstore.proto.PrepareMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tapirstore.proto.PrepareMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tapirstore.proto.PrepareMessage)
    MergeFrom(*source);
  }
}

void PrepareMessage::MergeFrom(const PrepareMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tapirstore.proto.PrepareMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_txn()->::TransactionMessage::MergeFrom(from._internal_txn());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_timestamp()->::TimestampMessage::MergeFrom(from._internal_timestamp());
    }
  }
}

void PrepareMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tapirstore.proto.PrepareMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareMessage::CopyFrom(const PrepareMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tapirstore.proto.PrepareMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_txn()) {
    if (!txn_->IsInitialized()) return false;
  }
  if (_internal_has_timestamp()) {
    if (!timestamp_->IsInitialized()) return false;
  }
  return true;
}

void PrepareMessage::InternalSwap(PrepareMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrepareMessage, timestamp_)
      + sizeof(PrepareMessage::timestamp_)
      - PROTOBUF_FIELD_OFFSET(PrepareMessage, txn_)>(
          reinterpret_cast<char*>(&txn_),
          reinterpret_cast<char*>(&other->txn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommitMessage::InitAsDefaultInstance() {
}
class CommitMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CommitMessage>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CommitMessage::CommitMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tapirstore.proto.CommitMessage)
}
CommitMessage::CommitMessage(const CommitMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:tapirstore.proto.CommitMessage)
}

void CommitMessage::SharedCtor() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}

CommitMessage::~CommitMessage() {
  // @@protoc_insertion_point(destructor:tapirstore.proto.CommitMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommitMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CommitMessage::ArenaDtor(void* object) {
  CommitMessage* _this = reinterpret_cast< CommitMessage* >(object);
  (void)_this;
}
void CommitMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommitMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommitMessage& CommitMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommitMessage_store_2ftapirstore_2ftapir_2dproto_2eproto.base);
  return *internal_default_instance();
}


void CommitMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tapirstore.proto.CommitMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommitMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommitMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tapirstore.proto.CommitMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tapirstore.proto.CommitMessage)
  return target;
}

size_t CommitMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tapirstore.proto.CommitMessage)
  size_t total_size = 0;

  // required uint64 timestamp = 1;
  if (_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommitMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tapirstore.proto.CommitMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CommitMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommitMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tapirstore.proto.CommitMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tapirstore.proto.CommitMessage)
    MergeFrom(*source);
  }
}

void CommitMessage::MergeFrom(const CommitMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tapirstore.proto.CommitMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timestamp()) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void CommitMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tapirstore.proto.CommitMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitMessage::CopyFrom(const CommitMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tapirstore.proto.CommitMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CommitMessage::InternalSwap(CommitMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommitMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AbortMessage::InitAsDefaultInstance() {
  ::tapirstore::proto::_AbortMessage_default_instance_._instance.get_mutable()->txn_ = const_cast< ::TransactionMessage*>(
      ::TransactionMessage::internal_default_instance());
}
class AbortMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AbortMessage>()._has_bits_);
  static const ::TransactionMessage& txn(const AbortMessage* msg);
  static void set_has_txn(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TransactionMessage&
AbortMessage::_Internal::txn(const AbortMessage* msg) {
  return *msg->txn_;
}
void AbortMessage::clear_txn() {
  if (txn_ != nullptr) txn_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
AbortMessage::AbortMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tapirstore.proto.AbortMessage)
}
AbortMessage::AbortMessage(const AbortMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_txn()) {
    txn_ = new ::TransactionMessage(*from.txn_);
  } else {
    txn_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tapirstore.proto.AbortMessage)
}

void AbortMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AbortMessage_store_2ftapirstore_2ftapir_2dproto_2eproto.base);
  txn_ = nullptr;
}

AbortMessage::~AbortMessage() {
  // @@protoc_insertion_point(destructor:tapirstore.proto.AbortMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AbortMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete txn_;
}

void AbortMessage::ArenaDtor(void* object) {
  AbortMessage* _this = reinterpret_cast< AbortMessage* >(object);
  (void)_this;
}
void AbortMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AbortMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AbortMessage& AbortMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AbortMessage_store_2ftapirstore_2ftapir_2dproto_2eproto.base);
  return *internal_default_instance();
}


void AbortMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tapirstore.proto.AbortMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(txn_ != nullptr);
    txn_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AbortMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .TransactionMessage txn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_txn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AbortMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tapirstore.proto.AbortMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TransactionMessage txn = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::txn(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tapirstore.proto.AbortMessage)
  return target;
}

size_t AbortMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tapirstore.proto.AbortMessage)
  size_t total_size = 0;

  // required .TransactionMessage txn = 1;
  if (_internal_has_txn()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *txn_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AbortMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tapirstore.proto.AbortMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AbortMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AbortMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tapirstore.proto.AbortMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tapirstore.proto.AbortMessage)
    MergeFrom(*source);
  }
}

void AbortMessage::MergeFrom(const AbortMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tapirstore.proto.AbortMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_txn()) {
    _internal_mutable_txn()->::TransactionMessage::MergeFrom(from._internal_txn());
  }
}

void AbortMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tapirstore.proto.AbortMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbortMessage::CopyFrom(const AbortMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tapirstore.proto.AbortMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbortMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_txn()) {
    if (!txn_->IsInitialized()) return false;
  }
  return true;
}

void AbortMessage::InternalSwap(AbortMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(txn_, other->txn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AbortMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Request::InitAsDefaultInstance() {
  ::tapirstore::proto::_Request_default_instance_._instance.get_mutable()->get_ = const_cast< ::tapirstore::proto::GetMessage*>(
      ::tapirstore::proto::GetMessage::internal_default_instance());
  ::tapirstore::proto::_Request_default_instance_._instance.get_mutable()->prepare_ = const_cast< ::tapirstore::proto::PrepareMessage*>(
      ::tapirstore::proto::PrepareMessage::internal_default_instance());
  ::tapirstore::proto::_Request_default_instance_._instance.get_mutable()->commit_ = const_cast< ::tapirstore::proto::CommitMessage*>(
      ::tapirstore::proto::CommitMessage::internal_default_instance());
  ::tapirstore::proto::_Request_default_instance_._instance.get_mutable()->abort_ = const_cast< ::tapirstore::proto::AbortMessage*>(
      ::tapirstore::proto::AbortMessage::internal_default_instance());
}
class Request::_Internal {
 public:
  using HasBits = decltype(std::declval<Request>()._has_bits_);
  static void set_has_op(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_txnid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::tapirstore::proto::GetMessage& get(const Request* msg);
  static void set_has_get(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tapirstore::proto::PrepareMessage& prepare(const Request* msg);
  static void set_has_prepare(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tapirstore::proto::CommitMessage& commit(const Request* msg);
  static void set_has_commit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tapirstore::proto::AbortMessage& abort(const Request* msg);
  static void set_has_abort(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000030) ^ 0x00000030) != 0;
  }
};

const ::tapirstore::proto::GetMessage&
Request::_Internal::get(const Request* msg) {
  return *msg->get_;
}
const ::tapirstore::proto::PrepareMessage&
Request::_Internal::prepare(const Request* msg) {
  return *msg->prepare_;
}
const ::tapirstore::proto::CommitMessage&
Request::_Internal::commit(const Request* msg) {
  return *msg->commit_;
}
const ::tapirstore::proto::AbortMessage&
Request::_Internal::abort(const Request* msg) {
  return *msg->abort_;
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tapirstore.proto.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_get()) {
    get_ = new ::tapirstore::proto::GetMessage(*from.get_);
  } else {
    get_ = nullptr;
  }
  if (from._internal_has_prepare()) {
    prepare_ = new ::tapirstore::proto::PrepareMessage(*from.prepare_);
  } else {
    prepare_ = nullptr;
  }
  if (from._internal_has_commit()) {
    commit_ = new ::tapirstore::proto::CommitMessage(*from.commit_);
  } else {
    commit_ = nullptr;
  }
  if (from._internal_has_abort()) {
    abort_ = new ::tapirstore::proto::AbortMessage(*from.abort_);
  } else {
    abort_ = nullptr;
  }
  ::memcpy(&txnid_, &from.txnid_,
    static_cast<size_t>(reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&txnid_)) + sizeof(op_));
  // @@protoc_insertion_point(copy_constructor:tapirstore.proto.Request)
}

void Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_store_2ftapirstore_2ftapir_2dproto_2eproto.base);
  ::memset(&get_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&txnid_) -
      reinterpret_cast<char*>(&get_)) + sizeof(txnid_));
  op_ = 1;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:tapirstore.proto.Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete get_;
  if (this != internal_default_instance()) delete prepare_;
  if (this != internal_default_instance()) delete commit_;
  if (this != internal_default_instance()) delete abort_;
}

void Request::ArenaDtor(void* object) {
  Request* _this = reinterpret_cast< Request* >(object);
  (void)_this;
}
void Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request& Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_store_2ftapirstore_2ftapir_2dproto_2eproto.base);
  return *internal_default_instance();
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:tapirstore.proto.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(get_ != nullptr);
      get_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(prepare_ != nullptr);
      prepare_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(commit_ != nullptr);
      commit_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(abort_ != nullptr);
      abort_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    txnid_ = PROTOBUF_ULONGLONG(0);
    op_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .tapirstore.proto.Request.Operation op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::tapirstore::proto::Request_Operation_IsValid(val))) {
            _internal_set_op(static_cast<::tapirstore::proto::Request_Operation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint64 txnid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_txnid(&has_bits);
          txnid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tapirstore.proto.GetMessage get = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_get(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tapirstore.proto.PrepareMessage prepare = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_prepare(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tapirstore.proto.CommitMessage commit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_commit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tapirstore.proto.AbortMessage abort = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_abort(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tapirstore.proto.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .tapirstore.proto.Request.Operation op = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_op(), target);
  }

  // required uint64 txnid = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_txnid(), target);
  }

  // optional .tapirstore.proto.GetMessage get = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::get(this), target, stream);
  }

  // optional .tapirstore.proto.PrepareMessage prepare = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::prepare(this), target, stream);
  }

  // optional .tapirstore.proto.CommitMessage commit = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::commit(this), target, stream);
  }

  // optional .tapirstore.proto.AbortMessage abort = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::abort(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tapirstore.proto.Request)
  return target;
}

size_t Request::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tapirstore.proto.Request)
  size_t total_size = 0;

  if (_internal_has_txnid()) {
    // required uint64 txnid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_txnid());
  }

  if (_internal_has_op()) {
    // required .tapirstore.proto.Request.Operation op = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  return total_size;
}
size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tapirstore.proto.Request)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000030) ^ 0x00000030) == 0) {  // All required fields are present.
    // required uint64 txnid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_txnid());

    // required .tapirstore.proto.Request.Operation op = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .tapirstore.proto.GetMessage get = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *get_);
    }

    // optional .tapirstore.proto.PrepareMessage prepare = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prepare_);
    }

    // optional .tapirstore.proto.CommitMessage commit = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commit_);
    }

    // optional .tapirstore.proto.AbortMessage abort = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *abort_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tapirstore.proto.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tapirstore.proto.Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tapirstore.proto.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tapirstore.proto.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_get()->::tapirstore::proto::GetMessage::MergeFrom(from._internal_get());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_prepare()->::tapirstore::proto::PrepareMessage::MergeFrom(from._internal_prepare());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_commit()->::tapirstore::proto::CommitMessage::MergeFrom(from._internal_commit());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_abort()->::tapirstore::proto::AbortMessage::MergeFrom(from._internal_abort());
    }
    if (cached_has_bits & 0x00000010u) {
      txnid_ = from.txnid_;
    }
    if (cached_has_bits & 0x00000020u) {
      op_ = from.op_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tapirstore.proto.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tapirstore.proto.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_get()) {
    if (!get_->IsInitialized()) return false;
  }
  if (_internal_has_prepare()) {
    if (!prepare_->IsInitialized()) return false;
  }
  if (_internal_has_commit()) {
    if (!commit_->IsInitialized()) return false;
  }
  if (_internal_has_abort()) {
    if (!abort_->IsInitialized()) return false;
  }
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request, txnid_)
      + sizeof(Request::txnid_)
      - PROTOBUF_FIELD_OFFSET(Request, get_)>(
          reinterpret_cast<char*>(&get_),
          reinterpret_cast<char*>(&other->get_));
  swap(op_, other->op_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Reply::InitAsDefaultInstance() {
  ::tapirstore::proto::_Reply_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::TimestampMessage*>(
      ::TimestampMessage::internal_default_instance());
}
class Reply::_Internal {
 public:
  using HasBits = decltype(std::declval<Reply>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TimestampMessage& timestamp(const Reply* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::TimestampMessage&
Reply::_Internal::timestamp(const Reply* msg) {
  return *msg->timestamp_;
}
void Reply::clear_timestamp() {
  if (timestamp_ != nullptr) timestamp_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Reply::Reply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tapirstore.proto.Reply)
}
Reply::Reply(const Reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::TimestampMessage(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:tapirstore.proto.Reply)
}

void Reply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Reply_store_2ftapirstore_2ftapir_2dproto_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(status_));
}

Reply::~Reply() {
  // @@protoc_insertion_point(destructor:tapirstore.proto.Reply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Reply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void Reply::ArenaDtor(void* object) {
  Reply* _this = reinterpret_cast< Reply* >(object);
  (void)_this;
}
void Reply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Reply& Reply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Reply_store_2ftapirstore_2ftapir_2dproto_2eproto.base);
  return *internal_default_instance();
}


void Reply::Clear() {
// @@protoc_insertion_point(message_clear_start:tapirstore.proto.Reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(timestamp_ != nullptr);
      timestamp_->Clear();
    }
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tapirstore.proto.Reply.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TimestampMessage timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Reply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tapirstore.proto.Reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 status = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tapirstore.proto.Reply.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // optional .TimestampMessage timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tapirstore.proto.Reply)
  return target;
}

size_t Reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tapirstore.proto.Reply)
  size_t total_size = 0;

  // required int32 status = 1;
  if (_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

    // optional .TimestampMessage timestamp = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *timestamp_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Reply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tapirstore.proto.Reply)
  GOOGLE_DCHECK_NE(&from, this);
  const Reply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Reply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tapirstore.proto.Reply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tapirstore.proto.Reply)
    MergeFrom(*source);
  }
}

void Reply::MergeFrom(const Reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tapirstore.proto.Reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_timestamp()->::TimestampMessage::MergeFrom(from._internal_timestamp());
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Reply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tapirstore.proto.Reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply::CopyFrom(const Reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tapirstore.proto.Reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_timestamp()) {
    if (!timestamp_->IsInitialized()) return false;
  }
  return true;
}

void Reply::InternalSwap(Reply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Reply, status_)
      + sizeof(Reply::status_)
      - PROTOBUF_FIELD_OFFSET(Reply, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Reply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace tapirstore
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tapirstore::proto::GetMessage* Arena::CreateMaybeMessage< ::tapirstore::proto::GetMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tapirstore::proto::GetMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::tapirstore::proto::PrepareMessage* Arena::CreateMaybeMessage< ::tapirstore::proto::PrepareMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tapirstore::proto::PrepareMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::tapirstore::proto::CommitMessage* Arena::CreateMaybeMessage< ::tapirstore::proto::CommitMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tapirstore::proto::CommitMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::tapirstore::proto::AbortMessage* Arena::CreateMaybeMessage< ::tapirstore::proto::AbortMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tapirstore::proto::AbortMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::tapirstore::proto::Request* Arena::CreateMaybeMessage< ::tapirstore::proto::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tapirstore::proto::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::tapirstore::proto::Reply* Arena::CreateMaybeMessage< ::tapirstore::proto::Reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tapirstore::proto::Reply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
