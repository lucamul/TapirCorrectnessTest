// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: replication/ir/ir-proto.proto

#include "replication/ir/ir-proto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_replication_2fcommon_2frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_replication_2fcommon_2frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_replication_2fcommon_2frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnloggedRequest_replication_2fcommon_2frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_replication_2fir_2fir_2dproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpID_replication_2fir_2fir_2dproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_replication_2fir_2fir_2dproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecordEntryProto_replication_2fir_2fir_2dproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_replication_2fir_2fir_2dproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecordProto_replication_2fir_2fir_2dproto_2eproto;
namespace replication {
namespace ir {
namespace proto {
class OpIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpID> _instance;
} _OpID_default_instance_;
class PersistedViewInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PersistedViewInfo> _instance;
} _PersistedViewInfo_default_instance_;
class RecordEntryProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecordEntryProto> _instance;
} _RecordEntryProto_default_instance_;
class RecordProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecordProto> _instance;
} _RecordProto_default_instance_;
class ProposeInconsistentMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProposeInconsistentMessage> _instance;
} _ProposeInconsistentMessage_default_instance_;
class ReplyInconsistentMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplyInconsistentMessage> _instance;
} _ReplyInconsistentMessage_default_instance_;
class FinalizeInconsistentMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FinalizeInconsistentMessage> _instance;
} _FinalizeInconsistentMessage_default_instance_;
class ConfirmMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfirmMessage> _instance;
} _ConfirmMessage_default_instance_;
class ProposeConsensusMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProposeConsensusMessage> _instance;
} _ProposeConsensusMessage_default_instance_;
class ReplyConsensusMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplyConsensusMessage> _instance;
} _ReplyConsensusMessage_default_instance_;
class FinalizeConsensusMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FinalizeConsensusMessage> _instance;
} _FinalizeConsensusMessage_default_instance_;
class DoViewChangeMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoViewChangeMessage> _instance;
} _DoViewChangeMessage_default_instance_;
class StartViewMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartViewMessage> _instance;
} _StartViewMessage_default_instance_;
class UnloggedRequestMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnloggedRequestMessage> _instance;
} _UnloggedRequestMessage_default_instance_;
class UnloggedReplyMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnloggedReplyMessage> _instance;
} _UnloggedReplyMessage_default_instance_;
}  // namespace proto
}  // namespace ir
}  // namespace replication
static void InitDefaultsscc_info_ConfirmMessage_replication_2fir_2fir_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::replication::ir::proto::_ConfirmMessage_default_instance_;
    new (ptr) ::replication::ir::proto::ConfirmMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::replication::ir::proto::ConfirmMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConfirmMessage_replication_2fir_2fir_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ConfirmMessage_replication_2fir_2fir_2dproto_2eproto}, {
      &scc_info_OpID_replication_2fir_2fir_2dproto_2eproto.base,}};

static void InitDefaultsscc_info_DoViewChangeMessage_replication_2fir_2fir_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::replication::ir::proto::_DoViewChangeMessage_default_instance_;
    new (ptr) ::replication::ir::proto::DoViewChangeMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::replication::ir::proto::DoViewChangeMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DoViewChangeMessage_replication_2fir_2fir_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DoViewChangeMessage_replication_2fir_2fir_2dproto_2eproto}, {
      &scc_info_RecordProto_replication_2fir_2fir_2dproto_2eproto.base,}};

static void InitDefaultsscc_info_FinalizeConsensusMessage_replication_2fir_2fir_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::replication::ir::proto::_FinalizeConsensusMessage_default_instance_;
    new (ptr) ::replication::ir::proto::FinalizeConsensusMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::replication::ir::proto::FinalizeConsensusMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FinalizeConsensusMessage_replication_2fir_2fir_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FinalizeConsensusMessage_replication_2fir_2fir_2dproto_2eproto}, {
      &scc_info_OpID_replication_2fir_2fir_2dproto_2eproto.base,}};

static void InitDefaultsscc_info_FinalizeInconsistentMessage_replication_2fir_2fir_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::replication::ir::proto::_FinalizeInconsistentMessage_default_instance_;
    new (ptr) ::replication::ir::proto::FinalizeInconsistentMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::replication::ir::proto::FinalizeInconsistentMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FinalizeInconsistentMessage_replication_2fir_2fir_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FinalizeInconsistentMessage_replication_2fir_2fir_2dproto_2eproto}, {
      &scc_info_OpID_replication_2fir_2fir_2dproto_2eproto.base,}};

static void InitDefaultsscc_info_OpID_replication_2fir_2fir_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::replication::ir::proto::_OpID_default_instance_;
    new (ptr) ::replication::ir::proto::OpID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::replication::ir::proto::OpID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpID_replication_2fir_2fir_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OpID_replication_2fir_2fir_2dproto_2eproto}, {}};

static void InitDefaultsscc_info_PersistedViewInfo_replication_2fir_2fir_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::replication::ir::proto::_PersistedViewInfo_default_instance_;
    new (ptr) ::replication::ir::proto::PersistedViewInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::replication::ir::proto::PersistedViewInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PersistedViewInfo_replication_2fir_2fir_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PersistedViewInfo_replication_2fir_2fir_2dproto_2eproto}, {}};

static void InitDefaultsscc_info_ProposeConsensusMessage_replication_2fir_2fir_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::replication::ir::proto::_ProposeConsensusMessage_default_instance_;
    new (ptr) ::replication::ir::proto::ProposeConsensusMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::replication::ir::proto::ProposeConsensusMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProposeConsensusMessage_replication_2fir_2fir_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProposeConsensusMessage_replication_2fir_2fir_2dproto_2eproto}, {
      &scc_info_Request_replication_2fcommon_2frequest_2eproto.base,}};

static void InitDefaultsscc_info_ProposeInconsistentMessage_replication_2fir_2fir_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::replication::ir::proto::_ProposeInconsistentMessage_default_instance_;
    new (ptr) ::replication::ir::proto::ProposeInconsistentMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::replication::ir::proto::ProposeInconsistentMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProposeInconsistentMessage_replication_2fir_2fir_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProposeInconsistentMessage_replication_2fir_2fir_2dproto_2eproto}, {
      &scc_info_Request_replication_2fcommon_2frequest_2eproto.base,}};

static void InitDefaultsscc_info_RecordEntryProto_replication_2fir_2fir_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::replication::ir::proto::_RecordEntryProto_default_instance_;
    new (ptr) ::replication::ir::proto::RecordEntryProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::replication::ir::proto::RecordEntryProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecordEntryProto_replication_2fir_2fir_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RecordEntryProto_replication_2fir_2fir_2dproto_2eproto}, {
      &scc_info_OpID_replication_2fir_2fir_2dproto_2eproto.base,}};

static void InitDefaultsscc_info_RecordProto_replication_2fir_2fir_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::replication::ir::proto::_RecordProto_default_instance_;
    new (ptr) ::replication::ir::proto::RecordProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::replication::ir::proto::RecordProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecordProto_replication_2fir_2fir_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RecordProto_replication_2fir_2fir_2dproto_2eproto}, {
      &scc_info_RecordEntryProto_replication_2fir_2fir_2dproto_2eproto.base,}};

static void InitDefaultsscc_info_ReplyConsensusMessage_replication_2fir_2fir_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::replication::ir::proto::_ReplyConsensusMessage_default_instance_;
    new (ptr) ::replication::ir::proto::ReplyConsensusMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::replication::ir::proto::ReplyConsensusMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReplyConsensusMessage_replication_2fir_2fir_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReplyConsensusMessage_replication_2fir_2fir_2dproto_2eproto}, {
      &scc_info_OpID_replication_2fir_2fir_2dproto_2eproto.base,}};

static void InitDefaultsscc_info_ReplyInconsistentMessage_replication_2fir_2fir_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::replication::ir::proto::_ReplyInconsistentMessage_default_instance_;
    new (ptr) ::replication::ir::proto::ReplyInconsistentMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::replication::ir::proto::ReplyInconsistentMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReplyInconsistentMessage_replication_2fir_2fir_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReplyInconsistentMessage_replication_2fir_2fir_2dproto_2eproto}, {
      &scc_info_OpID_replication_2fir_2fir_2dproto_2eproto.base,}};

static void InitDefaultsscc_info_StartViewMessage_replication_2fir_2fir_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::replication::ir::proto::_StartViewMessage_default_instance_;
    new (ptr) ::replication::ir::proto::StartViewMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::replication::ir::proto::StartViewMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StartViewMessage_replication_2fir_2fir_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StartViewMessage_replication_2fir_2fir_2dproto_2eproto}, {
      &scc_info_RecordProto_replication_2fir_2fir_2dproto_2eproto.base,}};

static void InitDefaultsscc_info_UnloggedReplyMessage_replication_2fir_2fir_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::replication::ir::proto::_UnloggedReplyMessage_default_instance_;
    new (ptr) ::replication::ir::proto::UnloggedReplyMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::replication::ir::proto::UnloggedReplyMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnloggedReplyMessage_replication_2fir_2fir_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnloggedReplyMessage_replication_2fir_2fir_2dproto_2eproto}, {}};

static void InitDefaultsscc_info_UnloggedRequestMessage_replication_2fir_2fir_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::replication::ir::proto::_UnloggedRequestMessage_default_instance_;
    new (ptr) ::replication::ir::proto::UnloggedRequestMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::replication::ir::proto::UnloggedRequestMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnloggedRequestMessage_replication_2fir_2fir_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UnloggedRequestMessage_replication_2fir_2fir_2dproto_2eproto}, {
      &scc_info_UnloggedRequest_replication_2fcommon_2frequest_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_replication_2fir_2fir_2dproto_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_replication_2fir_2fir_2dproto_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_replication_2fir_2fir_2dproto_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_replication_2fir_2fir_2dproto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::OpID, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::OpID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::OpID, clientid_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::OpID, clientreqid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::PersistedViewInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::PersistedViewInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::PersistedViewInfo, view_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::PersistedViewInfo, latest_normal_view_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::RecordEntryProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::RecordEntryProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::RecordEntryProto, view_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::RecordEntryProto, opid_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::RecordEntryProto, state_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::RecordEntryProto, type_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::RecordEntryProto, op_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::RecordEntryProto, result_),
  3,
  2,
  4,
  5,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::RecordProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::RecordProto, entry_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::ProposeInconsistentMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::ProposeInconsistentMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::ProposeInconsistentMessage, req_),
  0,
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::ReplyInconsistentMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::ReplyInconsistentMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::ReplyInconsistentMessage, view_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::ReplyInconsistentMessage, replicaidx_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::ReplyInconsistentMessage, opid_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::ReplyInconsistentMessage, finalized_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::FinalizeInconsistentMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::FinalizeInconsistentMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::FinalizeInconsistentMessage, opid_),
  0,
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::ConfirmMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::ConfirmMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::ConfirmMessage, view_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::ConfirmMessage, replicaidx_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::ConfirmMessage, opid_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::ProposeConsensusMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::ProposeConsensusMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::ProposeConsensusMessage, req_),
  0,
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::ReplyConsensusMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::ReplyConsensusMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::ReplyConsensusMessage, view_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::ReplyConsensusMessage, replicaidx_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::ReplyConsensusMessage, opid_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::ReplyConsensusMessage, result_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::ReplyConsensusMessage, finalized_),
  2,
  3,
  1,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::FinalizeConsensusMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::FinalizeConsensusMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::FinalizeConsensusMessage, opid_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::FinalizeConsensusMessage, result_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::DoViewChangeMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::DoViewChangeMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::DoViewChangeMessage, replicaidx_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::DoViewChangeMessage, record_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::DoViewChangeMessage, new_view_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::DoViewChangeMessage, latest_normal_view_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::StartViewMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::StartViewMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::StartViewMessage, record_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::StartViewMessage, new_view_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::UnloggedRequestMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::UnloggedRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::UnloggedRequestMessage, req_),
  0,
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::UnloggedReplyMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::UnloggedReplyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::UnloggedReplyMessage, reply_),
  PROTOBUF_FIELD_OFFSET(::replication::ir::proto::UnloggedReplyMessage, clientreqid_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::replication::ir::proto::OpID)},
  { 9, 16, sizeof(::replication::ir::proto::PersistedViewInfo)},
  { 18, 29, sizeof(::replication::ir::proto::RecordEntryProto)},
  { 35, -1, sizeof(::replication::ir::proto::RecordProto)},
  { 41, 47, sizeof(::replication::ir::proto::ProposeInconsistentMessage)},
  { 48, 57, sizeof(::replication::ir::proto::ReplyInconsistentMessage)},
  { 61, 67, sizeof(::replication::ir::proto::FinalizeInconsistentMessage)},
  { 68, 76, sizeof(::replication::ir::proto::ConfirmMessage)},
  { 79, 85, sizeof(::replication::ir::proto::ProposeConsensusMessage)},
  { 86, 96, sizeof(::replication::ir::proto::ReplyConsensusMessage)},
  { 101, 108, sizeof(::replication::ir::proto::FinalizeConsensusMessage)},
  { 110, 119, sizeof(::replication::ir::proto::DoViewChangeMessage)},
  { 123, 130, sizeof(::replication::ir::proto::StartViewMessage)},
  { 132, 138, sizeof(::replication::ir::proto::UnloggedRequestMessage)},
  { 139, 146, sizeof(::replication::ir::proto::UnloggedReplyMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replication::ir::proto::_OpID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replication::ir::proto::_PersistedViewInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replication::ir::proto::_RecordEntryProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replication::ir::proto::_RecordProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replication::ir::proto::_ProposeInconsistentMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replication::ir::proto::_ReplyInconsistentMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replication::ir::proto::_FinalizeInconsistentMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replication::ir::proto::_ConfirmMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replication::ir::proto::_ProposeConsensusMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replication::ir::proto::_ReplyConsensusMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replication::ir::proto::_FinalizeConsensusMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replication::ir::proto::_DoViewChangeMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replication::ir::proto::_StartViewMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replication::ir::proto::_UnloggedRequestMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replication::ir::proto::_UnloggedReplyMessage_default_instance_),
};

const char descriptor_table_protodef_replication_2fir_2fir_2dproto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035replication/ir/ir-proto.proto\022\024replica"
  "tion.ir.proto\032 replication/common/reques"
  "t.proto\"-\n\004OpID\022\020\n\010clientid\030\001 \002(\004\022\023\n\013cli"
  "entreqid\030\002 \002(\004\"=\n\021PersistedViewInfo\022\014\n\004v"
  "iew\030\001 \002(\004\022\032\n\022latest_normal_view\030\002 \002(\004\"\322\001"
  "\n\020RecordEntryProto\022\014\n\004view\030\001 \002(\004\022(\n\004opid"
  "\030\002 \002(\0132\032.replication.ir.proto.OpID\0225\n\005st"
  "ate\030\003 \002(\0162&.replication.ir.proto.RecordE"
  "ntryState\0223\n\004type\030\004 \002(\0162%.replication.ir"
  ".proto.RecordEntryType\022\n\n\002op\030\005 \002(\014\022\016\n\006re"
  "sult\030\006 \002(\014\"D\n\013RecordProto\0225\n\005entry\030\001 \003(\013"
  "2&.replication.ir.proto.RecordEntryProto"
  "\"\?\n\032ProposeInconsistentMessage\022!\n\003req\030\001 "
  "\002(\0132\024.replication.Request\"y\n\030ReplyIncons"
  "istentMessage\022\014\n\004view\030\001 \002(\004\022\022\n\nreplicaId"
  "x\030\002 \002(\r\022(\n\004opid\030\003 \002(\0132\032.replication.ir.p"
  "roto.OpID\022\021\n\tfinalized\030\004 \002(\010\"G\n\033Finalize"
  "InconsistentMessage\022(\n\004opid\030\001 \002(\0132\032.repl"
  "ication.ir.proto.OpID\"\\\n\016ConfirmMessage\022"
  "\014\n\004view\030\001 \002(\004\022\022\n\nreplicaIdx\030\002 \002(\r\022(\n\004opi"
  "d\030\003 \002(\0132\032.replication.ir.proto.OpID\"<\n\027P"
  "roposeConsensusMessage\022!\n\003req\030\001 \002(\0132\024.re"
  "plication.Request\"\206\001\n\025ReplyConsensusMess"
  "age\022\014\n\004view\030\001 \002(\004\022\022\n\nreplicaIdx\030\002 \002(\r\022(\n"
  "\004opid\030\003 \002(\0132\032.replication.ir.proto.OpID\022"
  "\016\n\006result\030\004 \002(\014\022\021\n\tfinalized\030\005 \002(\010\"T\n\030Fi"
  "nalizeConsensusMessage\022(\n\004opid\030\001 \002(\0132\032.r"
  "eplication.ir.proto.OpID\022\016\n\006result\030\002 \002(\014"
  "\"\212\001\n\023DoViewChangeMessage\022\022\n\nreplicaIdx\030\001"
  " \002(\r\0221\n\006record\030\002 \001(\0132!.replication.ir.pr"
  "oto.RecordProto\022\020\n\010new_view\030\003 \002(\004\022\032\n\022lat"
  "est_normal_view\030\004 \002(\004\"W\n\020StartViewMessag"
  "e\0221\n\006record\030\001 \002(\0132!.replication.ir.proto"
  ".RecordProto\022\020\n\010new_view\030\002 \002(\004\"C\n\026Unlogg"
  "edRequestMessage\022)\n\003req\030\001 \002(\0132\034.replicat"
  "ion.UnloggedRequest\":\n\024UnloggedReplyMess"
  "age\022\r\n\005reply\030\001 \002(\014\022\023\n\013clientreqid\030\002 \002(\004*"
  "J\n\020RecordEntryState\022\032\n\026RECORD_STATE_TENT"
  "ATIVE\020\000\022\032\n\026RECORD_STATE_FINALIZED\020\001*J\n\017R"
  "ecordEntryType\022\034\n\030RECORD_TYPE_INCONSISTE"
  "NT\020\000\022\031\n\025RECORD_TYPE_CONSENSUS\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_replication_2fir_2fir_2dproto_2eproto_deps[1] = {
  &::descriptor_table_replication_2fcommon_2frequest_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_replication_2fir_2fir_2dproto_2eproto_sccs[15] = {
  &scc_info_ConfirmMessage_replication_2fir_2fir_2dproto_2eproto.base,
  &scc_info_DoViewChangeMessage_replication_2fir_2fir_2dproto_2eproto.base,
  &scc_info_FinalizeConsensusMessage_replication_2fir_2fir_2dproto_2eproto.base,
  &scc_info_FinalizeInconsistentMessage_replication_2fir_2fir_2dproto_2eproto.base,
  &scc_info_OpID_replication_2fir_2fir_2dproto_2eproto.base,
  &scc_info_PersistedViewInfo_replication_2fir_2fir_2dproto_2eproto.base,
  &scc_info_ProposeConsensusMessage_replication_2fir_2fir_2dproto_2eproto.base,
  &scc_info_ProposeInconsistentMessage_replication_2fir_2fir_2dproto_2eproto.base,
  &scc_info_RecordEntryProto_replication_2fir_2fir_2dproto_2eproto.base,
  &scc_info_RecordProto_replication_2fir_2fir_2dproto_2eproto.base,
  &scc_info_ReplyConsensusMessage_replication_2fir_2fir_2dproto_2eproto.base,
  &scc_info_ReplyInconsistentMessage_replication_2fir_2fir_2dproto_2eproto.base,
  &scc_info_StartViewMessage_replication_2fir_2fir_2dproto_2eproto.base,
  &scc_info_UnloggedReplyMessage_replication_2fir_2fir_2dproto_2eproto.base,
  &scc_info_UnloggedRequestMessage_replication_2fir_2fir_2dproto_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_replication_2fir_2fir_2dproto_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_replication_2fir_2fir_2dproto_2eproto = {
  false, false, descriptor_table_protodef_replication_2fir_2fir_2dproto_2eproto, "replication/ir/ir-proto.proto", 1631,
  &descriptor_table_replication_2fir_2fir_2dproto_2eproto_once, descriptor_table_replication_2fir_2fir_2dproto_2eproto_sccs, descriptor_table_replication_2fir_2fir_2dproto_2eproto_deps, 15, 1,
  schemas, file_default_instances, TableStruct_replication_2fir_2fir_2dproto_2eproto::offsets,
  file_level_metadata_replication_2fir_2fir_2dproto_2eproto, 15, file_level_enum_descriptors_replication_2fir_2fir_2dproto_2eproto, file_level_service_descriptors_replication_2fir_2fir_2dproto_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_replication_2fir_2fir_2dproto_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_replication_2fir_2fir_2dproto_2eproto)), true);
namespace replication {
namespace ir {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecordEntryState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_replication_2fir_2fir_2dproto_2eproto);
  return file_level_enum_descriptors_replication_2fir_2fir_2dproto_2eproto[0];
}
bool RecordEntryState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecordEntryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_replication_2fir_2fir_2dproto_2eproto);
  return file_level_enum_descriptors_replication_2fir_2fir_2dproto_2eproto[1];
}
bool RecordEntryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void OpID::InitAsDefaultInstance() {
}
class OpID::_Internal {
 public:
  using HasBits = decltype(std::declval<OpID>()._has_bits_);
  static void set_has_clientid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_clientreqid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

OpID::OpID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replication.ir.proto.OpID)
}
OpID::OpID(const OpID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&clientid_, &from.clientid_,
    static_cast<size_t>(reinterpret_cast<char*>(&clientreqid_) -
    reinterpret_cast<char*>(&clientid_)) + sizeof(clientreqid_));
  // @@protoc_insertion_point(copy_constructor:replication.ir.proto.OpID)
}

void OpID::SharedCtor() {
  ::memset(&clientid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clientreqid_) -
      reinterpret_cast<char*>(&clientid_)) + sizeof(clientreqid_));
}

OpID::~OpID() {
  // @@protoc_insertion_point(destructor:replication.ir.proto.OpID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OpID::ArenaDtor(void* object) {
  OpID* _this = reinterpret_cast< OpID* >(object);
  (void)_this;
}
void OpID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpID& OpID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpID_replication_2fir_2fir_2dproto_2eproto.base);
  return *internal_default_instance();
}


void OpID::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.ir.proto.OpID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&clientid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clientreqid_) -
        reinterpret_cast<char*>(&clientid_)) + sizeof(clientreqid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 clientid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_clientid(&has_bits);
          clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 clientreqid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_clientreqid(&has_bits);
          clientreqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.ir.proto.OpID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 clientid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_clientid(), target);
  }

  // required uint64 clientreqid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_clientreqid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.ir.proto.OpID)
  return target;
}

size_t OpID::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:replication.ir.proto.OpID)
  size_t total_size = 0;

  if (_internal_has_clientid()) {
    // required uint64 clientid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_clientid());
  }

  if (_internal_has_clientreqid()) {
    // required uint64 clientreqid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_clientreqid());
  }

  return total_size;
}
size_t OpID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.ir.proto.OpID)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 clientid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_clientid());

    // required uint64 clientreqid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_clientreqid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replication.ir.proto.OpID)
  GOOGLE_DCHECK_NE(&from, this);
  const OpID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replication.ir.proto.OpID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replication.ir.proto.OpID)
    MergeFrom(*source);
  }
}

void OpID::MergeFrom(const OpID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replication.ir.proto.OpID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      clientid_ = from.clientid_;
    }
    if (cached_has_bits & 0x00000002u) {
      clientreqid_ = from.clientreqid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OpID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replication.ir.proto.OpID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpID::CopyFrom(const OpID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.ir.proto.OpID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpID::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void OpID::InternalSwap(OpID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpID, clientreqid_)
      + sizeof(OpID::clientreqid_)
      - PROTOBUF_FIELD_OFFSET(OpID, clientid_)>(
          reinterpret_cast<char*>(&clientid_),
          reinterpret_cast<char*>(&other->clientid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PersistedViewInfo::InitAsDefaultInstance() {
}
class PersistedViewInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PersistedViewInfo>()._has_bits_);
  static void set_has_view(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_latest_normal_view(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PersistedViewInfo::PersistedViewInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replication.ir.proto.PersistedViewInfo)
}
PersistedViewInfo::PersistedViewInfo(const PersistedViewInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&view_, &from.view_,
    static_cast<size_t>(reinterpret_cast<char*>(&latest_normal_view_) -
    reinterpret_cast<char*>(&view_)) + sizeof(latest_normal_view_));
  // @@protoc_insertion_point(copy_constructor:replication.ir.proto.PersistedViewInfo)
}

void PersistedViewInfo::SharedCtor() {
  ::memset(&view_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latest_normal_view_) -
      reinterpret_cast<char*>(&view_)) + sizeof(latest_normal_view_));
}

PersistedViewInfo::~PersistedViewInfo() {
  // @@protoc_insertion_point(destructor:replication.ir.proto.PersistedViewInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PersistedViewInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PersistedViewInfo::ArenaDtor(void* object) {
  PersistedViewInfo* _this = reinterpret_cast< PersistedViewInfo* >(object);
  (void)_this;
}
void PersistedViewInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PersistedViewInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PersistedViewInfo& PersistedViewInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PersistedViewInfo_replication_2fir_2fir_2dproto_2eproto.base);
  return *internal_default_instance();
}


void PersistedViewInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.ir.proto.PersistedViewInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&view_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latest_normal_view_) -
        reinterpret_cast<char*>(&view_)) + sizeof(latest_normal_view_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PersistedViewInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 view = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_view(&has_bits);
          view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 latest_normal_view = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_latest_normal_view(&has_bits);
          latest_normal_view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PersistedViewInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.ir.proto.PersistedViewInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 view = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_view(), target);
  }

  // required uint64 latest_normal_view = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_latest_normal_view(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.ir.proto.PersistedViewInfo)
  return target;
}

size_t PersistedViewInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:replication.ir.proto.PersistedViewInfo)
  size_t total_size = 0;

  if (_internal_has_view()) {
    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());
  }

  if (_internal_has_latest_normal_view()) {
    // required uint64 latest_normal_view = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_latest_normal_view());
  }

  return total_size;
}
size_t PersistedViewInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.ir.proto.PersistedViewInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());

    // required uint64 latest_normal_view = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_latest_normal_view());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PersistedViewInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replication.ir.proto.PersistedViewInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PersistedViewInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PersistedViewInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replication.ir.proto.PersistedViewInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replication.ir.proto.PersistedViewInfo)
    MergeFrom(*source);
  }
}

void PersistedViewInfo::MergeFrom(const PersistedViewInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replication.ir.proto.PersistedViewInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      view_ = from.view_;
    }
    if (cached_has_bits & 0x00000002u) {
      latest_normal_view_ = from.latest_normal_view_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PersistedViewInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replication.ir.proto.PersistedViewInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersistedViewInfo::CopyFrom(const PersistedViewInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.ir.proto.PersistedViewInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersistedViewInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PersistedViewInfo::InternalSwap(PersistedViewInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PersistedViewInfo, latest_normal_view_)
      + sizeof(PersistedViewInfo::latest_normal_view_)
      - PROTOBUF_FIELD_OFFSET(PersistedViewInfo, view_)>(
          reinterpret_cast<char*>(&view_),
          reinterpret_cast<char*>(&other->view_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PersistedViewInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecordEntryProto::InitAsDefaultInstance() {
  ::replication::ir::proto::_RecordEntryProto_default_instance_._instance.get_mutable()->opid_ = const_cast< ::replication::ir::proto::OpID*>(
      ::replication::ir::proto::OpID::internal_default_instance());
}
class RecordEntryProto::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordEntryProto>()._has_bits_);
  static void set_has_view(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::replication::ir::proto::OpID& opid(const RecordEntryProto* msg);
  static void set_has_opid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_op(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

const ::replication::ir::proto::OpID&
RecordEntryProto::_Internal::opid(const RecordEntryProto* msg) {
  return *msg->opid_;
}
RecordEntryProto::RecordEntryProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replication.ir.proto.RecordEntryProto)
}
RecordEntryProto::RecordEntryProto(const RecordEntryProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  op_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_op()) {
    op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_op(),
      GetArena());
  }
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_result()) {
    result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_result(),
      GetArena());
  }
  if (from._internal_has_opid()) {
    opid_ = new ::replication::ir::proto::OpID(*from.opid_);
  } else {
    opid_ = nullptr;
  }
  ::memcpy(&view_, &from.view_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&view_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:replication.ir.proto.RecordEntryProto)
}

void RecordEntryProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecordEntryProto_replication_2fir_2fir_2dproto_2eproto.base);
  op_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&opid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&opid_)) + sizeof(type_));
}

RecordEntryProto::~RecordEntryProto() {
  // @@protoc_insertion_point(destructor:replication.ir.proto.RecordEntryProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecordEntryProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  op_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete opid_;
}

void RecordEntryProto::ArenaDtor(void* object) {
  RecordEntryProto* _this = reinterpret_cast< RecordEntryProto* >(object);
  (void)_this;
}
void RecordEntryProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordEntryProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordEntryProto& RecordEntryProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecordEntryProto_replication_2fir_2fir_2dproto_2eproto.base);
  return *internal_default_instance();
}


void RecordEntryProto::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.ir.proto.RecordEntryProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      op_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      result_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(opid_ != nullptr);
      opid_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&view_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&view_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordEntryProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 view = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_view(&has_bits);
          view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .replication.ir.proto.OpID opid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_opid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .replication.ir.proto.RecordEntryState state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::replication::ir::proto::RecordEntryState_IsValid(val))) {
            _internal_set_state(static_cast<::replication::ir::proto::RecordEntryState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .replication.ir.proto.RecordEntryType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::replication::ir::proto::RecordEntryType_IsValid(val))) {
            _internal_set_type(static_cast<::replication::ir::proto::RecordEntryType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required bytes op = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_op();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes result = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordEntryProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.ir.proto.RecordEntryProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 view = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_view(), target);
  }

  // required .replication.ir.proto.OpID opid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::opid(this), target, stream);
  }

  // required .replication.ir.proto.RecordEntryState state = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  // required .replication.ir.proto.RecordEntryType type = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // required bytes op = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_op(), target);
  }

  // required bytes result = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.ir.proto.RecordEntryProto)
  return target;
}

size_t RecordEntryProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:replication.ir.proto.RecordEntryProto)
  size_t total_size = 0;

  if (_internal_has_op()) {
    // required bytes op = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_op());
  }

  if (_internal_has_result()) {
    // required bytes result = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_result());
  }

  if (_internal_has_opid()) {
    // required .replication.ir.proto.OpID opid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *opid_);
  }

  if (_internal_has_view()) {
    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());
  }

  if (_internal_has_state()) {
    // required .replication.ir.proto.RecordEntryState state = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (_internal_has_type()) {
    // required .replication.ir.proto.RecordEntryType type = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t RecordEntryProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.ir.proto.RecordEntryProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required bytes op = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_op());

    // required bytes result = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_result());

    // required .replication.ir.proto.OpID opid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *opid_);

    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());

    // required .replication.ir.proto.RecordEntryState state = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());

    // required .replication.ir.proto.RecordEntryType type = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordEntryProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replication.ir.proto.RecordEntryProto)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordEntryProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordEntryProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replication.ir.proto.RecordEntryProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replication.ir.proto.RecordEntryProto)
    MergeFrom(*source);
  }
}

void RecordEntryProto::MergeFrom(const RecordEntryProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replication.ir.proto.RecordEntryProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_op(from._internal_op());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_result(from._internal_result());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_opid()->::replication::ir::proto::OpID::MergeFrom(from._internal_opid());
    }
    if (cached_has_bits & 0x00000008u) {
      view_ = from.view_;
    }
    if (cached_has_bits & 0x00000010u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RecordEntryProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replication.ir.proto.RecordEntryProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordEntryProto::CopyFrom(const RecordEntryProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.ir.proto.RecordEntryProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordEntryProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_opid()) {
    if (!opid_->IsInitialized()) return false;
  }
  return true;
}

void RecordEntryProto::InternalSwap(RecordEntryProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  op_.Swap(&other->op_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  result_.Swap(&other->result_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordEntryProto, type_)
      + sizeof(RecordEntryProto::type_)
      - PROTOBUF_FIELD_OFFSET(RecordEntryProto, opid_)>(
          reinterpret_cast<char*>(&opid_),
          reinterpret_cast<char*>(&other->opid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordEntryProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecordProto::InitAsDefaultInstance() {
}
class RecordProto::_Internal {
 public:
};

RecordProto::RecordProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entry_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replication.ir.proto.RecordProto)
}
RecordProto::RecordProto(const RecordProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entry_(from.entry_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:replication.ir.proto.RecordProto)
}

void RecordProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecordProto_replication_2fir_2fir_2dproto_2eproto.base);
}

RecordProto::~RecordProto() {
  // @@protoc_insertion_point(destructor:replication.ir.proto.RecordProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecordProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RecordProto::ArenaDtor(void* object) {
  RecordProto* _this = reinterpret_cast< RecordProto* >(object);
  (void)_this;
}
void RecordProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordProto& RecordProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecordProto_replication_2fir_2fir_2dproto_2eproto.base);
  return *internal_default_instance();
}


void RecordProto::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.ir.proto.RecordProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entry_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .replication.ir.proto.RecordEntryProto entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.ir.proto.RecordProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .replication.ir.proto.RecordEntryProto entry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entry_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entry(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.ir.proto.RecordProto)
  return target;
}

size_t RecordProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.ir.proto.RecordProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .replication.ir.proto.RecordEntryProto entry = 1;
  total_size += 1UL * this->_internal_entry_size();
  for (const auto& msg : this->entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replication.ir.proto.RecordProto)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replication.ir.proto.RecordProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replication.ir.proto.RecordProto)
    MergeFrom(*source);
  }
}

void RecordProto::MergeFrom(const RecordProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replication.ir.proto.RecordProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entry_.MergeFrom(from.entry_);
}

void RecordProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replication.ir.proto.RecordProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordProto::CopyFrom(const RecordProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.ir.proto.RecordProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordProto::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(entry_)) return false;
  return true;
}

void RecordProto::InternalSwap(RecordProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entry_.InternalSwap(&other->entry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProposeInconsistentMessage::InitAsDefaultInstance() {
  ::replication::ir::proto::_ProposeInconsistentMessage_default_instance_._instance.get_mutable()->req_ = const_cast< ::replication::Request*>(
      ::replication::Request::internal_default_instance());
}
class ProposeInconsistentMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ProposeInconsistentMessage>()._has_bits_);
  static const ::replication::Request& req(const ProposeInconsistentMessage* msg);
  static void set_has_req(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::replication::Request&
ProposeInconsistentMessage::_Internal::req(const ProposeInconsistentMessage* msg) {
  return *msg->req_;
}
void ProposeInconsistentMessage::clear_req() {
  if (req_ != nullptr) req_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ProposeInconsistentMessage::ProposeInconsistentMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replication.ir.proto.ProposeInconsistentMessage)
}
ProposeInconsistentMessage::ProposeInconsistentMessage(const ProposeInconsistentMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_req()) {
    req_ = new ::replication::Request(*from.req_);
  } else {
    req_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:replication.ir.proto.ProposeInconsistentMessage)
}

void ProposeInconsistentMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProposeInconsistentMessage_replication_2fir_2fir_2dproto_2eproto.base);
  req_ = nullptr;
}

ProposeInconsistentMessage::~ProposeInconsistentMessage() {
  // @@protoc_insertion_point(destructor:replication.ir.proto.ProposeInconsistentMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProposeInconsistentMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete req_;
}

void ProposeInconsistentMessage::ArenaDtor(void* object) {
  ProposeInconsistentMessage* _this = reinterpret_cast< ProposeInconsistentMessage* >(object);
  (void)_this;
}
void ProposeInconsistentMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProposeInconsistentMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProposeInconsistentMessage& ProposeInconsistentMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProposeInconsistentMessage_replication_2fir_2fir_2dproto_2eproto.base);
  return *internal_default_instance();
}


void ProposeInconsistentMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.ir.proto.ProposeInconsistentMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(req_ != nullptr);
    req_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProposeInconsistentMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .replication.Request req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProposeInconsistentMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.ir.proto.ProposeInconsistentMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .replication.Request req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::req(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.ir.proto.ProposeInconsistentMessage)
  return target;
}

size_t ProposeInconsistentMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.ir.proto.ProposeInconsistentMessage)
  size_t total_size = 0;

  // required .replication.Request req = 1;
  if (_internal_has_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *req_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProposeInconsistentMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replication.ir.proto.ProposeInconsistentMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ProposeInconsistentMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProposeInconsistentMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replication.ir.proto.ProposeInconsistentMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replication.ir.proto.ProposeInconsistentMessage)
    MergeFrom(*source);
  }
}

void ProposeInconsistentMessage::MergeFrom(const ProposeInconsistentMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replication.ir.proto.ProposeInconsistentMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_req()) {
    _internal_mutable_req()->::replication::Request::MergeFrom(from._internal_req());
  }
}

void ProposeInconsistentMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replication.ir.proto.ProposeInconsistentMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProposeInconsistentMessage::CopyFrom(const ProposeInconsistentMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.ir.proto.ProposeInconsistentMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProposeInconsistentMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_req()) {
    if (!req_->IsInitialized()) return false;
  }
  return true;
}

void ProposeInconsistentMessage::InternalSwap(ProposeInconsistentMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(req_, other->req_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProposeInconsistentMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplyInconsistentMessage::InitAsDefaultInstance() {
  ::replication::ir::proto::_ReplyInconsistentMessage_default_instance_._instance.get_mutable()->opid_ = const_cast< ::replication::ir::proto::OpID*>(
      ::replication::ir::proto::OpID::internal_default_instance());
}
class ReplyInconsistentMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ReplyInconsistentMessage>()._has_bits_);
  static void set_has_view(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_replicaidx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::replication::ir::proto::OpID& opid(const ReplyInconsistentMessage* msg);
  static void set_has_opid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_finalized(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::replication::ir::proto::OpID&
ReplyInconsistentMessage::_Internal::opid(const ReplyInconsistentMessage* msg) {
  return *msg->opid_;
}
ReplyInconsistentMessage::ReplyInconsistentMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replication.ir.proto.ReplyInconsistentMessage)
}
ReplyInconsistentMessage::ReplyInconsistentMessage(const ReplyInconsistentMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_opid()) {
    opid_ = new ::replication::ir::proto::OpID(*from.opid_);
  } else {
    opid_ = nullptr;
  }
  ::memcpy(&view_, &from.view_,
    static_cast<size_t>(reinterpret_cast<char*>(&finalized_) -
    reinterpret_cast<char*>(&view_)) + sizeof(finalized_));
  // @@protoc_insertion_point(copy_constructor:replication.ir.proto.ReplyInconsistentMessage)
}

void ReplyInconsistentMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplyInconsistentMessage_replication_2fir_2fir_2dproto_2eproto.base);
  ::memset(&opid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finalized_) -
      reinterpret_cast<char*>(&opid_)) + sizeof(finalized_));
}

ReplyInconsistentMessage::~ReplyInconsistentMessage() {
  // @@protoc_insertion_point(destructor:replication.ir.proto.ReplyInconsistentMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplyInconsistentMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete opid_;
}

void ReplyInconsistentMessage::ArenaDtor(void* object) {
  ReplyInconsistentMessage* _this = reinterpret_cast< ReplyInconsistentMessage* >(object);
  (void)_this;
}
void ReplyInconsistentMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplyInconsistentMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplyInconsistentMessage& ReplyInconsistentMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplyInconsistentMessage_replication_2fir_2fir_2dproto_2eproto.base);
  return *internal_default_instance();
}


void ReplyInconsistentMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.ir.proto.ReplyInconsistentMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(opid_ != nullptr);
    opid_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&view_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&finalized_) -
        reinterpret_cast<char*>(&view_)) + sizeof(finalized_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplyInconsistentMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 view = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_view(&has_bits);
          view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 replicaIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_replicaidx(&has_bits);
          replicaidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .replication.ir.proto.OpID opid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_opid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool finalized = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_finalized(&has_bits);
          finalized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplyInconsistentMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.ir.proto.ReplyInconsistentMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 view = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_view(), target);
  }

  // required uint32 replicaIdx = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_replicaidx(), target);
  }

  // required .replication.ir.proto.OpID opid = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::opid(this), target, stream);
  }

  // required bool finalized = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_finalized(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.ir.proto.ReplyInconsistentMessage)
  return target;
}

size_t ReplyInconsistentMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:replication.ir.proto.ReplyInconsistentMessage)
  size_t total_size = 0;

  if (_internal_has_opid()) {
    // required .replication.ir.proto.OpID opid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *opid_);
  }

  if (_internal_has_view()) {
    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());
  }

  if (_internal_has_replicaidx()) {
    // required uint32 replicaIdx = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_replicaidx());
  }

  if (_internal_has_finalized()) {
    // required bool finalized = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ReplyInconsistentMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.ir.proto.ReplyInconsistentMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .replication.ir.proto.OpID opid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *opid_);

    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());

    // required uint32 replicaIdx = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_replicaidx());

    // required bool finalized = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplyInconsistentMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replication.ir.proto.ReplyInconsistentMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplyInconsistentMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplyInconsistentMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replication.ir.proto.ReplyInconsistentMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replication.ir.proto.ReplyInconsistentMessage)
    MergeFrom(*source);
  }
}

void ReplyInconsistentMessage::MergeFrom(const ReplyInconsistentMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replication.ir.proto.ReplyInconsistentMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_opid()->::replication::ir::proto::OpID::MergeFrom(from._internal_opid());
    }
    if (cached_has_bits & 0x00000002u) {
      view_ = from.view_;
    }
    if (cached_has_bits & 0x00000004u) {
      replicaidx_ = from.replicaidx_;
    }
    if (cached_has_bits & 0x00000008u) {
      finalized_ = from.finalized_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReplyInconsistentMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replication.ir.proto.ReplyInconsistentMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyInconsistentMessage::CopyFrom(const ReplyInconsistentMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.ir.proto.ReplyInconsistentMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyInconsistentMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_opid()) {
    if (!opid_->IsInitialized()) return false;
  }
  return true;
}

void ReplyInconsistentMessage::InternalSwap(ReplyInconsistentMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplyInconsistentMessage, finalized_)
      + sizeof(ReplyInconsistentMessage::finalized_)
      - PROTOBUF_FIELD_OFFSET(ReplyInconsistentMessage, opid_)>(
          reinterpret_cast<char*>(&opid_),
          reinterpret_cast<char*>(&other->opid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplyInconsistentMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FinalizeInconsistentMessage::InitAsDefaultInstance() {
  ::replication::ir::proto::_FinalizeInconsistentMessage_default_instance_._instance.get_mutable()->opid_ = const_cast< ::replication::ir::proto::OpID*>(
      ::replication::ir::proto::OpID::internal_default_instance());
}
class FinalizeInconsistentMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<FinalizeInconsistentMessage>()._has_bits_);
  static const ::replication::ir::proto::OpID& opid(const FinalizeInconsistentMessage* msg);
  static void set_has_opid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::replication::ir::proto::OpID&
FinalizeInconsistentMessage::_Internal::opid(const FinalizeInconsistentMessage* msg) {
  return *msg->opid_;
}
FinalizeInconsistentMessage::FinalizeInconsistentMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replication.ir.proto.FinalizeInconsistentMessage)
}
FinalizeInconsistentMessage::FinalizeInconsistentMessage(const FinalizeInconsistentMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_opid()) {
    opid_ = new ::replication::ir::proto::OpID(*from.opid_);
  } else {
    opid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:replication.ir.proto.FinalizeInconsistentMessage)
}

void FinalizeInconsistentMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FinalizeInconsistentMessage_replication_2fir_2fir_2dproto_2eproto.base);
  opid_ = nullptr;
}

FinalizeInconsistentMessage::~FinalizeInconsistentMessage() {
  // @@protoc_insertion_point(destructor:replication.ir.proto.FinalizeInconsistentMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FinalizeInconsistentMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete opid_;
}

void FinalizeInconsistentMessage::ArenaDtor(void* object) {
  FinalizeInconsistentMessage* _this = reinterpret_cast< FinalizeInconsistentMessage* >(object);
  (void)_this;
}
void FinalizeInconsistentMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FinalizeInconsistentMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FinalizeInconsistentMessage& FinalizeInconsistentMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FinalizeInconsistentMessage_replication_2fir_2fir_2dproto_2eproto.base);
  return *internal_default_instance();
}


void FinalizeInconsistentMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.ir.proto.FinalizeInconsistentMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(opid_ != nullptr);
    opid_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FinalizeInconsistentMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .replication.ir.proto.OpID opid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_opid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FinalizeInconsistentMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.ir.proto.FinalizeInconsistentMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .replication.ir.proto.OpID opid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::opid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.ir.proto.FinalizeInconsistentMessage)
  return target;
}

size_t FinalizeInconsistentMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.ir.proto.FinalizeInconsistentMessage)
  size_t total_size = 0;

  // required .replication.ir.proto.OpID opid = 1;
  if (_internal_has_opid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *opid_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FinalizeInconsistentMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replication.ir.proto.FinalizeInconsistentMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const FinalizeInconsistentMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FinalizeInconsistentMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replication.ir.proto.FinalizeInconsistentMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replication.ir.proto.FinalizeInconsistentMessage)
    MergeFrom(*source);
  }
}

void FinalizeInconsistentMessage::MergeFrom(const FinalizeInconsistentMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replication.ir.proto.FinalizeInconsistentMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_opid()) {
    _internal_mutable_opid()->::replication::ir::proto::OpID::MergeFrom(from._internal_opid());
  }
}

void FinalizeInconsistentMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replication.ir.proto.FinalizeInconsistentMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinalizeInconsistentMessage::CopyFrom(const FinalizeInconsistentMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.ir.proto.FinalizeInconsistentMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinalizeInconsistentMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_opid()) {
    if (!opid_->IsInitialized()) return false;
  }
  return true;
}

void FinalizeInconsistentMessage::InternalSwap(FinalizeInconsistentMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(opid_, other->opid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FinalizeInconsistentMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConfirmMessage::InitAsDefaultInstance() {
  ::replication::ir::proto::_ConfirmMessage_default_instance_._instance.get_mutable()->opid_ = const_cast< ::replication::ir::proto::OpID*>(
      ::replication::ir::proto::OpID::internal_default_instance());
}
class ConfirmMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfirmMessage>()._has_bits_);
  static void set_has_view(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_replicaidx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::replication::ir::proto::OpID& opid(const ConfirmMessage* msg);
  static void set_has_opid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::replication::ir::proto::OpID&
ConfirmMessage::_Internal::opid(const ConfirmMessage* msg) {
  return *msg->opid_;
}
ConfirmMessage::ConfirmMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replication.ir.proto.ConfirmMessage)
}
ConfirmMessage::ConfirmMessage(const ConfirmMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_opid()) {
    opid_ = new ::replication::ir::proto::OpID(*from.opid_);
  } else {
    opid_ = nullptr;
  }
  ::memcpy(&view_, &from.view_,
    static_cast<size_t>(reinterpret_cast<char*>(&replicaidx_) -
    reinterpret_cast<char*>(&view_)) + sizeof(replicaidx_));
  // @@protoc_insertion_point(copy_constructor:replication.ir.proto.ConfirmMessage)
}

void ConfirmMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfirmMessage_replication_2fir_2fir_2dproto_2eproto.base);
  ::memset(&opid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replicaidx_) -
      reinterpret_cast<char*>(&opid_)) + sizeof(replicaidx_));
}

ConfirmMessage::~ConfirmMessage() {
  // @@protoc_insertion_point(destructor:replication.ir.proto.ConfirmMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConfirmMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete opid_;
}

void ConfirmMessage::ArenaDtor(void* object) {
  ConfirmMessage* _this = reinterpret_cast< ConfirmMessage* >(object);
  (void)_this;
}
void ConfirmMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfirmMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfirmMessage& ConfirmMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfirmMessage_replication_2fir_2fir_2dproto_2eproto.base);
  return *internal_default_instance();
}


void ConfirmMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.ir.proto.ConfirmMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(opid_ != nullptr);
    opid_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&view_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&replicaidx_) -
        reinterpret_cast<char*>(&view_)) + sizeof(replicaidx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfirmMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 view = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_view(&has_bits);
          view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 replicaIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_replicaidx(&has_bits);
          replicaidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .replication.ir.proto.OpID opid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_opid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfirmMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.ir.proto.ConfirmMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 view = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_view(), target);
  }

  // required uint32 replicaIdx = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_replicaidx(), target);
  }

  // required .replication.ir.proto.OpID opid = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::opid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.ir.proto.ConfirmMessage)
  return target;
}

size_t ConfirmMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:replication.ir.proto.ConfirmMessage)
  size_t total_size = 0;

  if (_internal_has_opid()) {
    // required .replication.ir.proto.OpID opid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *opid_);
  }

  if (_internal_has_view()) {
    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());
  }

  if (_internal_has_replicaidx()) {
    // required uint32 replicaIdx = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_replicaidx());
  }

  return total_size;
}
size_t ConfirmMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.ir.proto.ConfirmMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .replication.ir.proto.OpID opid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *opid_);

    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());

    // required uint32 replicaIdx = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_replicaidx());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfirmMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replication.ir.proto.ConfirmMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfirmMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfirmMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replication.ir.proto.ConfirmMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replication.ir.proto.ConfirmMessage)
    MergeFrom(*source);
  }
}

void ConfirmMessage::MergeFrom(const ConfirmMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replication.ir.proto.ConfirmMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_opid()->::replication::ir::proto::OpID::MergeFrom(from._internal_opid());
    }
    if (cached_has_bits & 0x00000002u) {
      view_ = from.view_;
    }
    if (cached_has_bits & 0x00000004u) {
      replicaidx_ = from.replicaidx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfirmMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replication.ir.proto.ConfirmMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfirmMessage::CopyFrom(const ConfirmMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.ir.proto.ConfirmMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfirmMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_opid()) {
    if (!opid_->IsInitialized()) return false;
  }
  return true;
}

void ConfirmMessage::InternalSwap(ConfirmMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfirmMessage, replicaidx_)
      + sizeof(ConfirmMessage::replicaidx_)
      - PROTOBUF_FIELD_OFFSET(ConfirmMessage, opid_)>(
          reinterpret_cast<char*>(&opid_),
          reinterpret_cast<char*>(&other->opid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfirmMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProposeConsensusMessage::InitAsDefaultInstance() {
  ::replication::ir::proto::_ProposeConsensusMessage_default_instance_._instance.get_mutable()->req_ = const_cast< ::replication::Request*>(
      ::replication::Request::internal_default_instance());
}
class ProposeConsensusMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ProposeConsensusMessage>()._has_bits_);
  static const ::replication::Request& req(const ProposeConsensusMessage* msg);
  static void set_has_req(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::replication::Request&
ProposeConsensusMessage::_Internal::req(const ProposeConsensusMessage* msg) {
  return *msg->req_;
}
void ProposeConsensusMessage::clear_req() {
  if (req_ != nullptr) req_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ProposeConsensusMessage::ProposeConsensusMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replication.ir.proto.ProposeConsensusMessage)
}
ProposeConsensusMessage::ProposeConsensusMessage(const ProposeConsensusMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_req()) {
    req_ = new ::replication::Request(*from.req_);
  } else {
    req_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:replication.ir.proto.ProposeConsensusMessage)
}

void ProposeConsensusMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProposeConsensusMessage_replication_2fir_2fir_2dproto_2eproto.base);
  req_ = nullptr;
}

ProposeConsensusMessage::~ProposeConsensusMessage() {
  // @@protoc_insertion_point(destructor:replication.ir.proto.ProposeConsensusMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProposeConsensusMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete req_;
}

void ProposeConsensusMessage::ArenaDtor(void* object) {
  ProposeConsensusMessage* _this = reinterpret_cast< ProposeConsensusMessage* >(object);
  (void)_this;
}
void ProposeConsensusMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProposeConsensusMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProposeConsensusMessage& ProposeConsensusMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProposeConsensusMessage_replication_2fir_2fir_2dproto_2eproto.base);
  return *internal_default_instance();
}


void ProposeConsensusMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.ir.proto.ProposeConsensusMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(req_ != nullptr);
    req_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProposeConsensusMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .replication.Request req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProposeConsensusMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.ir.proto.ProposeConsensusMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .replication.Request req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::req(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.ir.proto.ProposeConsensusMessage)
  return target;
}

size_t ProposeConsensusMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.ir.proto.ProposeConsensusMessage)
  size_t total_size = 0;

  // required .replication.Request req = 1;
  if (_internal_has_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *req_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProposeConsensusMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replication.ir.proto.ProposeConsensusMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ProposeConsensusMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProposeConsensusMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replication.ir.proto.ProposeConsensusMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replication.ir.proto.ProposeConsensusMessage)
    MergeFrom(*source);
  }
}

void ProposeConsensusMessage::MergeFrom(const ProposeConsensusMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replication.ir.proto.ProposeConsensusMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_req()) {
    _internal_mutable_req()->::replication::Request::MergeFrom(from._internal_req());
  }
}

void ProposeConsensusMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replication.ir.proto.ProposeConsensusMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProposeConsensusMessage::CopyFrom(const ProposeConsensusMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.ir.proto.ProposeConsensusMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProposeConsensusMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_req()) {
    if (!req_->IsInitialized()) return false;
  }
  return true;
}

void ProposeConsensusMessage::InternalSwap(ProposeConsensusMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(req_, other->req_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProposeConsensusMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplyConsensusMessage::InitAsDefaultInstance() {
  ::replication::ir::proto::_ReplyConsensusMessage_default_instance_._instance.get_mutable()->opid_ = const_cast< ::replication::ir::proto::OpID*>(
      ::replication::ir::proto::OpID::internal_default_instance());
}
class ReplyConsensusMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ReplyConsensusMessage>()._has_bits_);
  static void set_has_view(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_replicaidx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::replication::ir::proto::OpID& opid(const ReplyConsensusMessage* msg);
  static void set_has_opid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_finalized(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::replication::ir::proto::OpID&
ReplyConsensusMessage::_Internal::opid(const ReplyConsensusMessage* msg) {
  return *msg->opid_;
}
ReplyConsensusMessage::ReplyConsensusMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replication.ir.proto.ReplyConsensusMessage)
}
ReplyConsensusMessage::ReplyConsensusMessage(const ReplyConsensusMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_result()) {
    result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_result(),
      GetArena());
  }
  if (from._internal_has_opid()) {
    opid_ = new ::replication::ir::proto::OpID(*from.opid_);
  } else {
    opid_ = nullptr;
  }
  ::memcpy(&view_, &from.view_,
    static_cast<size_t>(reinterpret_cast<char*>(&finalized_) -
    reinterpret_cast<char*>(&view_)) + sizeof(finalized_));
  // @@protoc_insertion_point(copy_constructor:replication.ir.proto.ReplyConsensusMessage)
}

void ReplyConsensusMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplyConsensusMessage_replication_2fir_2fir_2dproto_2eproto.base);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&opid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finalized_) -
      reinterpret_cast<char*>(&opid_)) + sizeof(finalized_));
}

ReplyConsensusMessage::~ReplyConsensusMessage() {
  // @@protoc_insertion_point(destructor:replication.ir.proto.ReplyConsensusMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplyConsensusMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete opid_;
}

void ReplyConsensusMessage::ArenaDtor(void* object) {
  ReplyConsensusMessage* _this = reinterpret_cast< ReplyConsensusMessage* >(object);
  (void)_this;
}
void ReplyConsensusMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplyConsensusMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplyConsensusMessage& ReplyConsensusMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplyConsensusMessage_replication_2fir_2fir_2dproto_2eproto.base);
  return *internal_default_instance();
}


void ReplyConsensusMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.ir.proto.ReplyConsensusMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      result_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(opid_ != nullptr);
      opid_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&view_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&finalized_) -
        reinterpret_cast<char*>(&view_)) + sizeof(finalized_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplyConsensusMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 view = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_view(&has_bits);
          view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 replicaIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_replicaidx(&has_bits);
          replicaidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .replication.ir.proto.OpID opid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_opid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool finalized = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_finalized(&has_bits);
          finalized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplyConsensusMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.ir.proto.ReplyConsensusMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 view = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_view(), target);
  }

  // required uint32 replicaIdx = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_replicaidx(), target);
  }

  // required .replication.ir.proto.OpID opid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::opid(this), target, stream);
  }

  // required bytes result = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_result(), target);
  }

  // required bool finalized = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_finalized(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.ir.proto.ReplyConsensusMessage)
  return target;
}

size_t ReplyConsensusMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:replication.ir.proto.ReplyConsensusMessage)
  size_t total_size = 0;

  if (_internal_has_result()) {
    // required bytes result = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_result());
  }

  if (_internal_has_opid()) {
    // required .replication.ir.proto.OpID opid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *opid_);
  }

  if (_internal_has_view()) {
    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());
  }

  if (_internal_has_replicaidx()) {
    // required uint32 replicaIdx = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_replicaidx());
  }

  if (_internal_has_finalized()) {
    // required bool finalized = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ReplyConsensusMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.ir.proto.ReplyConsensusMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes result = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_result());

    // required .replication.ir.proto.OpID opid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *opid_);

    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());

    // required uint32 replicaIdx = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_replicaidx());

    // required bool finalized = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplyConsensusMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replication.ir.proto.ReplyConsensusMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplyConsensusMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplyConsensusMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replication.ir.proto.ReplyConsensusMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replication.ir.proto.ReplyConsensusMessage)
    MergeFrom(*source);
  }
}

void ReplyConsensusMessage::MergeFrom(const ReplyConsensusMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replication.ir.proto.ReplyConsensusMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_result(from._internal_result());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_opid()->::replication::ir::proto::OpID::MergeFrom(from._internal_opid());
    }
    if (cached_has_bits & 0x00000004u) {
      view_ = from.view_;
    }
    if (cached_has_bits & 0x00000008u) {
      replicaidx_ = from.replicaidx_;
    }
    if (cached_has_bits & 0x00000010u) {
      finalized_ = from.finalized_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReplyConsensusMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replication.ir.proto.ReplyConsensusMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyConsensusMessage::CopyFrom(const ReplyConsensusMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.ir.proto.ReplyConsensusMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyConsensusMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_opid()) {
    if (!opid_->IsInitialized()) return false;
  }
  return true;
}

void ReplyConsensusMessage::InternalSwap(ReplyConsensusMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  result_.Swap(&other->result_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplyConsensusMessage, finalized_)
      + sizeof(ReplyConsensusMessage::finalized_)
      - PROTOBUF_FIELD_OFFSET(ReplyConsensusMessage, opid_)>(
          reinterpret_cast<char*>(&opid_),
          reinterpret_cast<char*>(&other->opid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplyConsensusMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FinalizeConsensusMessage::InitAsDefaultInstance() {
  ::replication::ir::proto::_FinalizeConsensusMessage_default_instance_._instance.get_mutable()->opid_ = const_cast< ::replication::ir::proto::OpID*>(
      ::replication::ir::proto::OpID::internal_default_instance());
}
class FinalizeConsensusMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<FinalizeConsensusMessage>()._has_bits_);
  static const ::replication::ir::proto::OpID& opid(const FinalizeConsensusMessage* msg);
  static void set_has_opid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::replication::ir::proto::OpID&
FinalizeConsensusMessage::_Internal::opid(const FinalizeConsensusMessage* msg) {
  return *msg->opid_;
}
FinalizeConsensusMessage::FinalizeConsensusMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replication.ir.proto.FinalizeConsensusMessage)
}
FinalizeConsensusMessage::FinalizeConsensusMessage(const FinalizeConsensusMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_result()) {
    result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_result(),
      GetArena());
  }
  if (from._internal_has_opid()) {
    opid_ = new ::replication::ir::proto::OpID(*from.opid_);
  } else {
    opid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:replication.ir.proto.FinalizeConsensusMessage)
}

void FinalizeConsensusMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FinalizeConsensusMessage_replication_2fir_2fir_2dproto_2eproto.base);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  opid_ = nullptr;
}

FinalizeConsensusMessage::~FinalizeConsensusMessage() {
  // @@protoc_insertion_point(destructor:replication.ir.proto.FinalizeConsensusMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FinalizeConsensusMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete opid_;
}

void FinalizeConsensusMessage::ArenaDtor(void* object) {
  FinalizeConsensusMessage* _this = reinterpret_cast< FinalizeConsensusMessage* >(object);
  (void)_this;
}
void FinalizeConsensusMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FinalizeConsensusMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FinalizeConsensusMessage& FinalizeConsensusMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FinalizeConsensusMessage_replication_2fir_2fir_2dproto_2eproto.base);
  return *internal_default_instance();
}


void FinalizeConsensusMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.ir.proto.FinalizeConsensusMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      result_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(opid_ != nullptr);
      opid_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FinalizeConsensusMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .replication.ir.proto.OpID opid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_opid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FinalizeConsensusMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.ir.proto.FinalizeConsensusMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .replication.ir.proto.OpID opid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::opid(this), target, stream);
  }

  // required bytes result = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.ir.proto.FinalizeConsensusMessage)
  return target;
}

size_t FinalizeConsensusMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:replication.ir.proto.FinalizeConsensusMessage)
  size_t total_size = 0;

  if (_internal_has_result()) {
    // required bytes result = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_result());
  }

  if (_internal_has_opid()) {
    // required .replication.ir.proto.OpID opid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *opid_);
  }

  return total_size;
}
size_t FinalizeConsensusMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.ir.proto.FinalizeConsensusMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes result = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_result());

    // required .replication.ir.proto.OpID opid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *opid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FinalizeConsensusMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replication.ir.proto.FinalizeConsensusMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const FinalizeConsensusMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FinalizeConsensusMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replication.ir.proto.FinalizeConsensusMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replication.ir.proto.FinalizeConsensusMessage)
    MergeFrom(*source);
  }
}

void FinalizeConsensusMessage::MergeFrom(const FinalizeConsensusMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replication.ir.proto.FinalizeConsensusMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_result(from._internal_result());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_opid()->::replication::ir::proto::OpID::MergeFrom(from._internal_opid());
    }
  }
}

void FinalizeConsensusMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replication.ir.proto.FinalizeConsensusMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinalizeConsensusMessage::CopyFrom(const FinalizeConsensusMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.ir.proto.FinalizeConsensusMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinalizeConsensusMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_opid()) {
    if (!opid_->IsInitialized()) return false;
  }
  return true;
}

void FinalizeConsensusMessage::InternalSwap(FinalizeConsensusMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  result_.Swap(&other->result_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(opid_, other->opid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FinalizeConsensusMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DoViewChangeMessage::InitAsDefaultInstance() {
  ::replication::ir::proto::_DoViewChangeMessage_default_instance_._instance.get_mutable()->record_ = const_cast< ::replication::ir::proto::RecordProto*>(
      ::replication::ir::proto::RecordProto::internal_default_instance());
}
class DoViewChangeMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<DoViewChangeMessage>()._has_bits_);
  static void set_has_replicaidx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::replication::ir::proto::RecordProto& record(const DoViewChangeMessage* msg);
  static void set_has_record(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_view(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_latest_normal_view(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000e) ^ 0x0000000e) != 0;
  }
};

const ::replication::ir::proto::RecordProto&
DoViewChangeMessage::_Internal::record(const DoViewChangeMessage* msg) {
  return *msg->record_;
}
DoViewChangeMessage::DoViewChangeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replication.ir.proto.DoViewChangeMessage)
}
DoViewChangeMessage::DoViewChangeMessage(const DoViewChangeMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_record()) {
    record_ = new ::replication::ir::proto::RecordProto(*from.record_);
  } else {
    record_ = nullptr;
  }
  ::memcpy(&new_view_, &from.new_view_,
    static_cast<size_t>(reinterpret_cast<char*>(&replicaidx_) -
    reinterpret_cast<char*>(&new_view_)) + sizeof(replicaidx_));
  // @@protoc_insertion_point(copy_constructor:replication.ir.proto.DoViewChangeMessage)
}

void DoViewChangeMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoViewChangeMessage_replication_2fir_2fir_2dproto_2eproto.base);
  ::memset(&record_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replicaidx_) -
      reinterpret_cast<char*>(&record_)) + sizeof(replicaidx_));
}

DoViewChangeMessage::~DoViewChangeMessage() {
  // @@protoc_insertion_point(destructor:replication.ir.proto.DoViewChangeMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DoViewChangeMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete record_;
}

void DoViewChangeMessage::ArenaDtor(void* object) {
  DoViewChangeMessage* _this = reinterpret_cast< DoViewChangeMessage* >(object);
  (void)_this;
}
void DoViewChangeMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DoViewChangeMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoViewChangeMessage& DoViewChangeMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoViewChangeMessage_replication_2fir_2fir_2dproto_2eproto.base);
  return *internal_default_instance();
}


void DoViewChangeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.ir.proto.DoViewChangeMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(record_ != nullptr);
    record_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&new_view_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&replicaidx_) -
        reinterpret_cast<char*>(&new_view_)) + sizeof(replicaidx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoViewChangeMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 replicaIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_replicaidx(&has_bits);
          replicaidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .replication.ir.proto.RecordProto record = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_record(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 new_view = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_new_view(&has_bits);
          new_view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 latest_normal_view = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_latest_normal_view(&has_bits);
          latest_normal_view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoViewChangeMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.ir.proto.DoViewChangeMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 replicaIdx = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_replicaidx(), target);
  }

  // optional .replication.ir.proto.RecordProto record = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::record(this), target, stream);
  }

  // required uint64 new_view = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_new_view(), target);
  }

  // required uint64 latest_normal_view = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_latest_normal_view(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.ir.proto.DoViewChangeMessage)
  return target;
}

size_t DoViewChangeMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:replication.ir.proto.DoViewChangeMessage)
  size_t total_size = 0;

  if (_internal_has_new_view()) {
    // required uint64 new_view = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_new_view());
  }

  if (_internal_has_latest_normal_view()) {
    // required uint64 latest_normal_view = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_latest_normal_view());
  }

  if (_internal_has_replicaidx()) {
    // required uint32 replicaIdx = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_replicaidx());
  }

  return total_size;
}
size_t DoViewChangeMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.ir.proto.DoViewChangeMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required uint64 new_view = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_new_view());

    // required uint64 latest_normal_view = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_latest_normal_view());

    // required uint32 replicaIdx = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_replicaidx());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .replication.ir.proto.RecordProto record = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *record_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoViewChangeMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replication.ir.proto.DoViewChangeMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DoViewChangeMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoViewChangeMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replication.ir.proto.DoViewChangeMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replication.ir.proto.DoViewChangeMessage)
    MergeFrom(*source);
  }
}

void DoViewChangeMessage::MergeFrom(const DoViewChangeMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replication.ir.proto.DoViewChangeMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_record()->::replication::ir::proto::RecordProto::MergeFrom(from._internal_record());
    }
    if (cached_has_bits & 0x00000002u) {
      new_view_ = from.new_view_;
    }
    if (cached_has_bits & 0x00000004u) {
      latest_normal_view_ = from.latest_normal_view_;
    }
    if (cached_has_bits & 0x00000008u) {
      replicaidx_ = from.replicaidx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DoViewChangeMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replication.ir.proto.DoViewChangeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoViewChangeMessage::CopyFrom(const DoViewChangeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.ir.proto.DoViewChangeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoViewChangeMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_record()) {
    if (!record_->IsInitialized()) return false;
  }
  return true;
}

void DoViewChangeMessage::InternalSwap(DoViewChangeMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DoViewChangeMessage, replicaidx_)
      + sizeof(DoViewChangeMessage::replicaidx_)
      - PROTOBUF_FIELD_OFFSET(DoViewChangeMessage, record_)>(
          reinterpret_cast<char*>(&record_),
          reinterpret_cast<char*>(&other->record_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DoViewChangeMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartViewMessage::InitAsDefaultInstance() {
  ::replication::ir::proto::_StartViewMessage_default_instance_._instance.get_mutable()->record_ = const_cast< ::replication::ir::proto::RecordProto*>(
      ::replication::ir::proto::RecordProto::internal_default_instance());
}
class StartViewMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<StartViewMessage>()._has_bits_);
  static const ::replication::ir::proto::RecordProto& record(const StartViewMessage* msg);
  static void set_has_record(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_view(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::replication::ir::proto::RecordProto&
StartViewMessage::_Internal::record(const StartViewMessage* msg) {
  return *msg->record_;
}
StartViewMessage::StartViewMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replication.ir.proto.StartViewMessage)
}
StartViewMessage::StartViewMessage(const StartViewMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_record()) {
    record_ = new ::replication::ir::proto::RecordProto(*from.record_);
  } else {
    record_ = nullptr;
  }
  new_view_ = from.new_view_;
  // @@protoc_insertion_point(copy_constructor:replication.ir.proto.StartViewMessage)
}

void StartViewMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartViewMessage_replication_2fir_2fir_2dproto_2eproto.base);
  ::memset(&record_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_view_) -
      reinterpret_cast<char*>(&record_)) + sizeof(new_view_));
}

StartViewMessage::~StartViewMessage() {
  // @@protoc_insertion_point(destructor:replication.ir.proto.StartViewMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartViewMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete record_;
}

void StartViewMessage::ArenaDtor(void* object) {
  StartViewMessage* _this = reinterpret_cast< StartViewMessage* >(object);
  (void)_this;
}
void StartViewMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartViewMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartViewMessage& StartViewMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartViewMessage_replication_2fir_2fir_2dproto_2eproto.base);
  return *internal_default_instance();
}


void StartViewMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.ir.proto.StartViewMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(record_ != nullptr);
    record_->Clear();
  }
  new_view_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartViewMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .replication.ir.proto.RecordProto record = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_record(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 new_view = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_new_view(&has_bits);
          new_view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartViewMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.ir.proto.StartViewMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .replication.ir.proto.RecordProto record = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::record(this), target, stream);
  }

  // required uint64 new_view = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_new_view(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.ir.proto.StartViewMessage)
  return target;
}

size_t StartViewMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:replication.ir.proto.StartViewMessage)
  size_t total_size = 0;

  if (_internal_has_record()) {
    // required .replication.ir.proto.RecordProto record = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *record_);
  }

  if (_internal_has_new_view()) {
    // required uint64 new_view = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_new_view());
  }

  return total_size;
}
size_t StartViewMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.ir.proto.StartViewMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .replication.ir.proto.RecordProto record = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *record_);

    // required uint64 new_view = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_new_view());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartViewMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replication.ir.proto.StartViewMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const StartViewMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartViewMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replication.ir.proto.StartViewMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replication.ir.proto.StartViewMessage)
    MergeFrom(*source);
  }
}

void StartViewMessage::MergeFrom(const StartViewMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replication.ir.proto.StartViewMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_record()->::replication::ir::proto::RecordProto::MergeFrom(from._internal_record());
    }
    if (cached_has_bits & 0x00000002u) {
      new_view_ = from.new_view_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StartViewMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replication.ir.proto.StartViewMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartViewMessage::CopyFrom(const StartViewMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.ir.proto.StartViewMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartViewMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_record()) {
    if (!record_->IsInitialized()) return false;
  }
  return true;
}

void StartViewMessage::InternalSwap(StartViewMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartViewMessage, new_view_)
      + sizeof(StartViewMessage::new_view_)
      - PROTOBUF_FIELD_OFFSET(StartViewMessage, record_)>(
          reinterpret_cast<char*>(&record_),
          reinterpret_cast<char*>(&other->record_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartViewMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnloggedRequestMessage::InitAsDefaultInstance() {
  ::replication::ir::proto::_UnloggedRequestMessage_default_instance_._instance.get_mutable()->req_ = const_cast< ::replication::UnloggedRequest*>(
      ::replication::UnloggedRequest::internal_default_instance());
}
class UnloggedRequestMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<UnloggedRequestMessage>()._has_bits_);
  static const ::replication::UnloggedRequest& req(const UnloggedRequestMessage* msg);
  static void set_has_req(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::replication::UnloggedRequest&
UnloggedRequestMessage::_Internal::req(const UnloggedRequestMessage* msg) {
  return *msg->req_;
}
void UnloggedRequestMessage::clear_req() {
  if (req_ != nullptr) req_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
UnloggedRequestMessage::UnloggedRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replication.ir.proto.UnloggedRequestMessage)
}
UnloggedRequestMessage::UnloggedRequestMessage(const UnloggedRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_req()) {
    req_ = new ::replication::UnloggedRequest(*from.req_);
  } else {
    req_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:replication.ir.proto.UnloggedRequestMessage)
}

void UnloggedRequestMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnloggedRequestMessage_replication_2fir_2fir_2dproto_2eproto.base);
  req_ = nullptr;
}

UnloggedRequestMessage::~UnloggedRequestMessage() {
  // @@protoc_insertion_point(destructor:replication.ir.proto.UnloggedRequestMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnloggedRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete req_;
}

void UnloggedRequestMessage::ArenaDtor(void* object) {
  UnloggedRequestMessage* _this = reinterpret_cast< UnloggedRequestMessage* >(object);
  (void)_this;
}
void UnloggedRequestMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnloggedRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnloggedRequestMessage& UnloggedRequestMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnloggedRequestMessage_replication_2fir_2fir_2dproto_2eproto.base);
  return *internal_default_instance();
}


void UnloggedRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.ir.proto.UnloggedRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(req_ != nullptr);
    req_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnloggedRequestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .replication.UnloggedRequest req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnloggedRequestMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.ir.proto.UnloggedRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .replication.UnloggedRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::req(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.ir.proto.UnloggedRequestMessage)
  return target;
}

size_t UnloggedRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.ir.proto.UnloggedRequestMessage)
  size_t total_size = 0;

  // required .replication.UnloggedRequest req = 1;
  if (_internal_has_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *req_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnloggedRequestMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replication.ir.proto.UnloggedRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UnloggedRequestMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnloggedRequestMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replication.ir.proto.UnloggedRequestMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replication.ir.proto.UnloggedRequestMessage)
    MergeFrom(*source);
  }
}

void UnloggedRequestMessage::MergeFrom(const UnloggedRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replication.ir.proto.UnloggedRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_req()) {
    _internal_mutable_req()->::replication::UnloggedRequest::MergeFrom(from._internal_req());
  }
}

void UnloggedRequestMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replication.ir.proto.UnloggedRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnloggedRequestMessage::CopyFrom(const UnloggedRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.ir.proto.UnloggedRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnloggedRequestMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_req()) {
    if (!req_->IsInitialized()) return false;
  }
  return true;
}

void UnloggedRequestMessage::InternalSwap(UnloggedRequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(req_, other->req_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnloggedRequestMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnloggedReplyMessage::InitAsDefaultInstance() {
}
class UnloggedReplyMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<UnloggedReplyMessage>()._has_bits_);
  static void set_has_reply(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_clientreqid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

UnloggedReplyMessage::UnloggedReplyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replication.ir.proto.UnloggedReplyMessage)
}
UnloggedReplyMessage::UnloggedReplyMessage(const UnloggedReplyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reply()) {
    reply_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reply(),
      GetArena());
  }
  clientreqid_ = from.clientreqid_;
  // @@protoc_insertion_point(copy_constructor:replication.ir.proto.UnloggedReplyMessage)
}

void UnloggedReplyMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnloggedReplyMessage_replication_2fir_2fir_2dproto_2eproto.base);
  reply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientreqid_ = PROTOBUF_ULONGLONG(0);
}

UnloggedReplyMessage::~UnloggedReplyMessage() {
  // @@protoc_insertion_point(destructor:replication.ir.proto.UnloggedReplyMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnloggedReplyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reply_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnloggedReplyMessage::ArenaDtor(void* object) {
  UnloggedReplyMessage* _this = reinterpret_cast< UnloggedReplyMessage* >(object);
  (void)_this;
}
void UnloggedReplyMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnloggedReplyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnloggedReplyMessage& UnloggedReplyMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnloggedReplyMessage_replication_2fir_2fir_2dproto_2eproto.base);
  return *internal_default_instance();
}


void UnloggedReplyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.ir.proto.UnloggedReplyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reply_.ClearNonDefaultToEmpty();
  }
  clientreqid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnloggedReplyMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reply();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 clientreqid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_clientreqid(&has_bits);
          clientreqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnloggedReplyMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.ir.proto.UnloggedReplyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes reply = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_reply(), target);
  }

  // required uint64 clientreqid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_clientreqid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.ir.proto.UnloggedReplyMessage)
  return target;
}

size_t UnloggedReplyMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:replication.ir.proto.UnloggedReplyMessage)
  size_t total_size = 0;

  if (_internal_has_reply()) {
    // required bytes reply = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_reply());
  }

  if (_internal_has_clientreqid()) {
    // required uint64 clientreqid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_clientreqid());
  }

  return total_size;
}
size_t UnloggedReplyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.ir.proto.UnloggedReplyMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes reply = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_reply());

    // required uint64 clientreqid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_clientreqid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnloggedReplyMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replication.ir.proto.UnloggedReplyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UnloggedReplyMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnloggedReplyMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replication.ir.proto.UnloggedReplyMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replication.ir.proto.UnloggedReplyMessage)
    MergeFrom(*source);
  }
}

void UnloggedReplyMessage::MergeFrom(const UnloggedReplyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replication.ir.proto.UnloggedReplyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_reply(from._internal_reply());
    }
    if (cached_has_bits & 0x00000002u) {
      clientreqid_ = from.clientreqid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UnloggedReplyMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replication.ir.proto.UnloggedReplyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnloggedReplyMessage::CopyFrom(const UnloggedReplyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.ir.proto.UnloggedReplyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnloggedReplyMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UnloggedReplyMessage::InternalSwap(UnloggedReplyMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reply_.Swap(&other->reply_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(clientreqid_, other->clientreqid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnloggedReplyMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace ir
}  // namespace replication
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::replication::ir::proto::OpID* Arena::CreateMaybeMessage< ::replication::ir::proto::OpID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::ir::proto::OpID >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::ir::proto::PersistedViewInfo* Arena::CreateMaybeMessage< ::replication::ir::proto::PersistedViewInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::ir::proto::PersistedViewInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::ir::proto::RecordEntryProto* Arena::CreateMaybeMessage< ::replication::ir::proto::RecordEntryProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::ir::proto::RecordEntryProto >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::ir::proto::RecordProto* Arena::CreateMaybeMessage< ::replication::ir::proto::RecordProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::ir::proto::RecordProto >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::ir::proto::ProposeInconsistentMessage* Arena::CreateMaybeMessage< ::replication::ir::proto::ProposeInconsistentMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::ir::proto::ProposeInconsistentMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::ir::proto::ReplyInconsistentMessage* Arena::CreateMaybeMessage< ::replication::ir::proto::ReplyInconsistentMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::ir::proto::ReplyInconsistentMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::ir::proto::FinalizeInconsistentMessage* Arena::CreateMaybeMessage< ::replication::ir::proto::FinalizeInconsistentMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::ir::proto::FinalizeInconsistentMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::ir::proto::ConfirmMessage* Arena::CreateMaybeMessage< ::replication::ir::proto::ConfirmMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::ir::proto::ConfirmMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::ir::proto::ProposeConsensusMessage* Arena::CreateMaybeMessage< ::replication::ir::proto::ProposeConsensusMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::ir::proto::ProposeConsensusMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::ir::proto::ReplyConsensusMessage* Arena::CreateMaybeMessage< ::replication::ir::proto::ReplyConsensusMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::ir::proto::ReplyConsensusMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::ir::proto::FinalizeConsensusMessage* Arena::CreateMaybeMessage< ::replication::ir::proto::FinalizeConsensusMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::ir::proto::FinalizeConsensusMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::ir::proto::DoViewChangeMessage* Arena::CreateMaybeMessage< ::replication::ir::proto::DoViewChangeMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::ir::proto::DoViewChangeMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::ir::proto::StartViewMessage* Arena::CreateMaybeMessage< ::replication::ir::proto::StartViewMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::ir::proto::StartViewMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::ir::proto::UnloggedRequestMessage* Arena::CreateMaybeMessage< ::replication::ir::proto::UnloggedRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::ir::proto::UnloggedRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::ir::proto::UnloggedReplyMessage* Arena::CreateMaybeMessage< ::replication::ir::proto::UnloggedReplyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::ir::proto::UnloggedReplyMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
