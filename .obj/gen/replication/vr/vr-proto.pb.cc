// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: replication/vr/vr-proto.proto

#include "replication/vr/vr-proto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_replication_2fcommon_2frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_replication_2fcommon_2frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_replication_2fcommon_2frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnloggedRequest_replication_2fcommon_2frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_replication_2fvr_2fvr_2dproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DoViewChangeMessage_LogEntry_replication_2fvr_2fvr_2dproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_replication_2fvr_2fvr_2dproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StartViewMessage_LogEntry_replication_2fvr_2fvr_2dproto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_replication_2fvr_2fvr_2dproto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateTransferMessage_LogEntry_replication_2fvr_2fvr_2dproto_2eproto;
namespace replication {
namespace vr {
namespace proto {
class RequestMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestMessage> _instance;
} _RequestMessage_default_instance_;
class ReplyMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplyMessage> _instance;
} _ReplyMessage_default_instance_;
class UnloggedRequestMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnloggedRequestMessage> _instance;
} _UnloggedRequestMessage_default_instance_;
class UnloggedReplyMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnloggedReplyMessage> _instance;
} _UnloggedReplyMessage_default_instance_;
class PrepareMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareMessage> _instance;
} _PrepareMessage_default_instance_;
class PrepareOKMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareOKMessage> _instance;
} _PrepareOKMessage_default_instance_;
class CommitMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommitMessage> _instance;
} _CommitMessage_default_instance_;
class RequestStateTransferMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestStateTransferMessage> _instance;
} _RequestStateTransferMessage_default_instance_;
class StateTransferMessage_LogEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateTransferMessage_LogEntry> _instance;
} _StateTransferMessage_LogEntry_default_instance_;
class StateTransferMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateTransferMessage> _instance;
} _StateTransferMessage_default_instance_;
class StartViewChangeMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartViewChangeMessage> _instance;
} _StartViewChangeMessage_default_instance_;
class DoViewChangeMessage_LogEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoViewChangeMessage_LogEntry> _instance;
} _DoViewChangeMessage_LogEntry_default_instance_;
class DoViewChangeMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoViewChangeMessage> _instance;
} _DoViewChangeMessage_default_instance_;
class StartViewMessage_LogEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartViewMessage_LogEntry> _instance;
} _StartViewMessage_LogEntry_default_instance_;
class StartViewMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartViewMessage> _instance;
} _StartViewMessage_default_instance_;
}  // namespace proto
}  // namespace vr
}  // namespace replication
static void InitDefaultsscc_info_CommitMessage_replication_2fvr_2fvr_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::replication::vr::proto::_CommitMessage_default_instance_;
    new (ptr) ::replication::vr::proto::CommitMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::replication::vr::proto::CommitMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommitMessage_replication_2fvr_2fvr_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommitMessage_replication_2fvr_2fvr_2dproto_2eproto}, {}};

static void InitDefaultsscc_info_DoViewChangeMessage_replication_2fvr_2fvr_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::replication::vr::proto::_DoViewChangeMessage_default_instance_;
    new (ptr) ::replication::vr::proto::DoViewChangeMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::replication::vr::proto::DoViewChangeMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DoViewChangeMessage_replication_2fvr_2fvr_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DoViewChangeMessage_replication_2fvr_2fvr_2dproto_2eproto}, {
      &scc_info_DoViewChangeMessage_LogEntry_replication_2fvr_2fvr_2dproto_2eproto.base,}};

static void InitDefaultsscc_info_DoViewChangeMessage_LogEntry_replication_2fvr_2fvr_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::replication::vr::proto::_DoViewChangeMessage_LogEntry_default_instance_;
    new (ptr) ::replication::vr::proto::DoViewChangeMessage_LogEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::replication::vr::proto::DoViewChangeMessage_LogEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DoViewChangeMessage_LogEntry_replication_2fvr_2fvr_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DoViewChangeMessage_LogEntry_replication_2fvr_2fvr_2dproto_2eproto}, {
      &scc_info_Request_replication_2fcommon_2frequest_2eproto.base,}};

static void InitDefaultsscc_info_PrepareMessage_replication_2fvr_2fvr_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::replication::vr::proto::_PrepareMessage_default_instance_;
    new (ptr) ::replication::vr::proto::PrepareMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::replication::vr::proto::PrepareMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrepareMessage_replication_2fvr_2fvr_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PrepareMessage_replication_2fvr_2fvr_2dproto_2eproto}, {
      &scc_info_Request_replication_2fcommon_2frequest_2eproto.base,}};

static void InitDefaultsscc_info_PrepareOKMessage_replication_2fvr_2fvr_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::replication::vr::proto::_PrepareOKMessage_default_instance_;
    new (ptr) ::replication::vr::proto::PrepareOKMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::replication::vr::proto::PrepareOKMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrepareOKMessage_replication_2fvr_2fvr_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrepareOKMessage_replication_2fvr_2fvr_2dproto_2eproto}, {}};

static void InitDefaultsscc_info_ReplyMessage_replication_2fvr_2fvr_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::replication::vr::proto::_ReplyMessage_default_instance_;
    new (ptr) ::replication::vr::proto::ReplyMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::replication::vr::proto::ReplyMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReplyMessage_replication_2fvr_2fvr_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReplyMessage_replication_2fvr_2fvr_2dproto_2eproto}, {}};

static void InitDefaultsscc_info_RequestMessage_replication_2fvr_2fvr_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::replication::vr::proto::_RequestMessage_default_instance_;
    new (ptr) ::replication::vr::proto::RequestMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::replication::vr::proto::RequestMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestMessage_replication_2fvr_2fvr_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RequestMessage_replication_2fvr_2fvr_2dproto_2eproto}, {
      &scc_info_Request_replication_2fcommon_2frequest_2eproto.base,}};

static void InitDefaultsscc_info_RequestStateTransferMessage_replication_2fvr_2fvr_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::replication::vr::proto::_RequestStateTransferMessage_default_instance_;
    new (ptr) ::replication::vr::proto::RequestStateTransferMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::replication::vr::proto::RequestStateTransferMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestStateTransferMessage_replication_2fvr_2fvr_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestStateTransferMessage_replication_2fvr_2fvr_2dproto_2eproto}, {}};

static void InitDefaultsscc_info_StartViewChangeMessage_replication_2fvr_2fvr_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::replication::vr::proto::_StartViewChangeMessage_default_instance_;
    new (ptr) ::replication::vr::proto::StartViewChangeMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::replication::vr::proto::StartViewChangeMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartViewChangeMessage_replication_2fvr_2fvr_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartViewChangeMessage_replication_2fvr_2fvr_2dproto_2eproto}, {}};

static void InitDefaultsscc_info_StartViewMessage_replication_2fvr_2fvr_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::replication::vr::proto::_StartViewMessage_default_instance_;
    new (ptr) ::replication::vr::proto::StartViewMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::replication::vr::proto::StartViewMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StartViewMessage_replication_2fvr_2fvr_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StartViewMessage_replication_2fvr_2fvr_2dproto_2eproto}, {
      &scc_info_StartViewMessage_LogEntry_replication_2fvr_2fvr_2dproto_2eproto.base,}};

static void InitDefaultsscc_info_StartViewMessage_LogEntry_replication_2fvr_2fvr_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::replication::vr::proto::_StartViewMessage_LogEntry_default_instance_;
    new (ptr) ::replication::vr::proto::StartViewMessage_LogEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::replication::vr::proto::StartViewMessage_LogEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StartViewMessage_LogEntry_replication_2fvr_2fvr_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StartViewMessage_LogEntry_replication_2fvr_2fvr_2dproto_2eproto}, {
      &scc_info_Request_replication_2fcommon_2frequest_2eproto.base,}};

static void InitDefaultsscc_info_StateTransferMessage_replication_2fvr_2fvr_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::replication::vr::proto::_StateTransferMessage_default_instance_;
    new (ptr) ::replication::vr::proto::StateTransferMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::replication::vr::proto::StateTransferMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateTransferMessage_replication_2fvr_2fvr_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StateTransferMessage_replication_2fvr_2fvr_2dproto_2eproto}, {
      &scc_info_StateTransferMessage_LogEntry_replication_2fvr_2fvr_2dproto_2eproto.base,}};

static void InitDefaultsscc_info_StateTransferMessage_LogEntry_replication_2fvr_2fvr_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::replication::vr::proto::_StateTransferMessage_LogEntry_default_instance_;
    new (ptr) ::replication::vr::proto::StateTransferMessage_LogEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::replication::vr::proto::StateTransferMessage_LogEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateTransferMessage_LogEntry_replication_2fvr_2fvr_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StateTransferMessage_LogEntry_replication_2fvr_2fvr_2dproto_2eproto}, {
      &scc_info_Request_replication_2fcommon_2frequest_2eproto.base,}};

static void InitDefaultsscc_info_UnloggedReplyMessage_replication_2fvr_2fvr_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::replication::vr::proto::_UnloggedReplyMessage_default_instance_;
    new (ptr) ::replication::vr::proto::UnloggedReplyMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::replication::vr::proto::UnloggedReplyMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnloggedReplyMessage_replication_2fvr_2fvr_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnloggedReplyMessage_replication_2fvr_2fvr_2dproto_2eproto}, {}};

static void InitDefaultsscc_info_UnloggedRequestMessage_replication_2fvr_2fvr_2dproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::replication::vr::proto::_UnloggedRequestMessage_default_instance_;
    new (ptr) ::replication::vr::proto::UnloggedRequestMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::replication::vr::proto::UnloggedRequestMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnloggedRequestMessage_replication_2fvr_2fvr_2dproto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UnloggedRequestMessage_replication_2fvr_2fvr_2dproto_2eproto}, {
      &scc_info_UnloggedRequest_replication_2fcommon_2frequest_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_replication_2fvr_2fvr_2dproto_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_replication_2fvr_2fvr_2dproto_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_replication_2fvr_2fvr_2dproto_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_replication_2fvr_2fvr_2dproto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::RequestMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::RequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::RequestMessage, req_),
  0,
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::ReplyMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::ReplyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::ReplyMessage, view_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::ReplyMessage, opnum_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::ReplyMessage, clientreqid_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::ReplyMessage, reply_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::UnloggedRequestMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::UnloggedRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::UnloggedRequestMessage, req_),
  0,
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::UnloggedReplyMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::UnloggedReplyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::UnloggedReplyMessage, reply_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::UnloggedReplyMessage, clientreqid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::PrepareMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::PrepareMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::PrepareMessage, view_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::PrepareMessage, opnum_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::PrepareMessage, batchstart_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::PrepareMessage, request_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::PrepareOKMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::PrepareOKMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::PrepareOKMessage, view_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::PrepareOKMessage, opnum_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::PrepareOKMessage, replicaidx_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::CommitMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::CommitMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::CommitMessage, view_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::CommitMessage, opnum_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::RequestStateTransferMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::RequestStateTransferMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::RequestStateTransferMessage, view_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::RequestStateTransferMessage, opnum_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::StateTransferMessage_LogEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::StateTransferMessage_LogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::StateTransferMessage_LogEntry, view_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::StateTransferMessage_LogEntry, opnum_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::StateTransferMessage_LogEntry, request_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::StateTransferMessage_LogEntry, state_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::StateTransferMessage_LogEntry, hash_),
  2,
  3,
  1,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::StateTransferMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::StateTransferMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::StateTransferMessage, view_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::StateTransferMessage, opnum_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::StateTransferMessage, entries_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::StartViewChangeMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::StartViewChangeMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::StartViewChangeMessage, view_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::StartViewChangeMessage, replicaidx_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::StartViewChangeMessage, lastcommitted_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::DoViewChangeMessage_LogEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::DoViewChangeMessage_LogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::DoViewChangeMessage_LogEntry, view_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::DoViewChangeMessage_LogEntry, opnum_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::DoViewChangeMessage_LogEntry, request_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::DoViewChangeMessage_LogEntry, state_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::DoViewChangeMessage_LogEntry, hash_),
  2,
  3,
  1,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::DoViewChangeMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::DoViewChangeMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::DoViewChangeMessage, view_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::DoViewChangeMessage, lastnormalview_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::DoViewChangeMessage, lastop_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::DoViewChangeMessage, lastcommitted_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::DoViewChangeMessage, entries_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::DoViewChangeMessage, replicaidx_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::StartViewMessage_LogEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::StartViewMessage_LogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::StartViewMessage_LogEntry, view_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::StartViewMessage_LogEntry, opnum_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::StartViewMessage_LogEntry, request_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::StartViewMessage_LogEntry, state_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::StartViewMessage_LogEntry, hash_),
  2,
  3,
  1,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::StartViewMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::StartViewMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::StartViewMessage, view_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::StartViewMessage, lastop_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::StartViewMessage, lastcommitted_),
  PROTOBUF_FIELD_OFFSET(::replication::vr::proto::StartViewMessage, entries_),
  0,
  1,
  2,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::replication::vr::proto::RequestMessage)},
  { 7, 16, sizeof(::replication::vr::proto::ReplyMessage)},
  { 20, 26, sizeof(::replication::vr::proto::UnloggedRequestMessage)},
  { 27, 34, sizeof(::replication::vr::proto::UnloggedReplyMessage)},
  { 36, 45, sizeof(::replication::vr::proto::PrepareMessage)},
  { 49, 57, sizeof(::replication::vr::proto::PrepareOKMessage)},
  { 60, 67, sizeof(::replication::vr::proto::CommitMessage)},
  { 69, 76, sizeof(::replication::vr::proto::RequestStateTransferMessage)},
  { 78, 88, sizeof(::replication::vr::proto::StateTransferMessage_LogEntry)},
  { 93, 101, sizeof(::replication::vr::proto::StateTransferMessage)},
  { 104, 112, sizeof(::replication::vr::proto::StartViewChangeMessage)},
  { 115, 125, sizeof(::replication::vr::proto::DoViewChangeMessage_LogEntry)},
  { 130, 141, sizeof(::replication::vr::proto::DoViewChangeMessage)},
  { 147, 157, sizeof(::replication::vr::proto::StartViewMessage_LogEntry)},
  { 162, 171, sizeof(::replication::vr::proto::StartViewMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replication::vr::proto::_RequestMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replication::vr::proto::_ReplyMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replication::vr::proto::_UnloggedRequestMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replication::vr::proto::_UnloggedReplyMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replication::vr::proto::_PrepareMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replication::vr::proto::_PrepareOKMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replication::vr::proto::_CommitMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replication::vr::proto::_RequestStateTransferMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replication::vr::proto::_StateTransferMessage_LogEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replication::vr::proto::_StateTransferMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replication::vr::proto::_StartViewChangeMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replication::vr::proto::_DoViewChangeMessage_LogEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replication::vr::proto::_DoViewChangeMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replication::vr::proto::_StartViewMessage_LogEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replication::vr::proto::_StartViewMessage_default_instance_),
};

const char descriptor_table_protodef_replication_2fvr_2fvr_2dproto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035replication/vr/vr-proto.proto\022\024replica"
  "tion.vr.proto\032 replication/common/reques"
  "t.proto\"3\n\016RequestMessage\022!\n\003req\030\001 \002(\0132\024"
  ".replication.Request\"O\n\014ReplyMessage\022\014\n\004"
  "view\030\001 \002(\004\022\r\n\005opnum\030\002 \002(\004\022\023\n\013clientreqid"
  "\030\003 \002(\004\022\r\n\005reply\030\004 \002(\014\"C\n\026UnloggedRequest"
  "Message\022)\n\003req\030\001 \002(\0132\034.replication.Unlog"
  "gedRequest\":\n\024UnloggedReplyMessage\022\r\n\005re"
  "ply\030\001 \002(\014\022\023\n\013clientreqid\030\002 \002(\004\"h\n\016Prepar"
  "eMessage\022\014\n\004view\030\001 \002(\004\022\r\n\005opnum\030\002 \002(\004\022\022\n"
  "\nbatchstart\030\003 \002(\004\022%\n\007request\030\004 \003(\0132\024.rep"
  "lication.Request\"C\n\020PrepareOKMessage\022\014\n\004"
  "view\030\001 \002(\004\022\r\n\005opnum\030\002 \002(\004\022\022\n\nreplicaIdx\030"
  "\003 \002(\r\",\n\rCommitMessage\022\014\n\004view\030\001 \002(\004\022\r\n\005"
  "opnum\030\002 \002(\004\":\n\033RequestStateTransferMessa"
  "ge\022\014\n\004view\030\001 \002(\004\022\r\n\005opnum\030\002 \002(\004\"\346\001\n\024Stat"
  "eTransferMessage\022\014\n\004view\030\001 \002(\004\022\r\n\005opnum\030"
  "\002 \002(\004\022D\n\007entries\030\003 \003(\01323.replication.vr."
  "proto.StateTransferMessage.LogEntry\032k\n\010L"
  "ogEntry\022\014\n\004view\030\001 \002(\004\022\r\n\005opnum\030\002 \002(\004\022%\n\007"
  "request\030\003 \002(\0132\024.replication.Request\022\r\n\005s"
  "tate\030\004 \001(\r\022\014\n\004hash\030\005 \001(\014\"Q\n\026StartViewCha"
  "ngeMessage\022\014\n\004view\030\001 \002(\004\022\022\n\nreplicaIdx\030\002"
  " \002(\r\022\025\n\rlastCommitted\030\003 \002(\004\"\250\002\n\023DoViewCh"
  "angeMessage\022\014\n\004view\030\001 \002(\004\022\026\n\016lastNormalV"
  "iew\030\002 \002(\004\022\016\n\006lastOp\030\003 \002(\004\022\025\n\rlastCommitt"
  "ed\030\004 \002(\004\022C\n\007entries\030\005 \003(\01322.replication."
  "vr.proto.DoViewChangeMessage.LogEntry\022\022\n"
  "\nreplicaIdx\030\006 \002(\r\032k\n\010LogEntry\022\014\n\004view\030\001 "
  "\002(\004\022\r\n\005opnum\030\002 \002(\004\022%\n\007request\030\003 \002(\0132\024.re"
  "plication.Request\022\r\n\005state\030\004 \001(\r\022\014\n\004hash"
  "\030\005 \001(\014\"\366\001\n\020StartViewMessage\022\014\n\004view\030\001 \002("
  "\004\022\016\n\006lastOp\030\002 \002(\004\022\025\n\rlastCommitted\030\003 \002(\004"
  "\022@\n\007entries\030\004 \003(\0132/.replication.vr.proto"
  ".StartViewMessage.LogEntry\032k\n\010LogEntry\022\014"
  "\n\004view\030\001 \002(\004\022\r\n\005opnum\030\002 \002(\004\022%\n\007request\030\003"
  " \002(\0132\024.replication.Request\022\r\n\005state\030\004 \001("
  "\r\022\014\n\004hash\030\005 \001(\014"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_replication_2fvr_2fvr_2dproto_2eproto_deps[1] = {
  &::descriptor_table_replication_2fcommon_2frequest_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_replication_2fvr_2fvr_2dproto_2eproto_sccs[15] = {
  &scc_info_CommitMessage_replication_2fvr_2fvr_2dproto_2eproto.base,
  &scc_info_DoViewChangeMessage_replication_2fvr_2fvr_2dproto_2eproto.base,
  &scc_info_DoViewChangeMessage_LogEntry_replication_2fvr_2fvr_2dproto_2eproto.base,
  &scc_info_PrepareMessage_replication_2fvr_2fvr_2dproto_2eproto.base,
  &scc_info_PrepareOKMessage_replication_2fvr_2fvr_2dproto_2eproto.base,
  &scc_info_ReplyMessage_replication_2fvr_2fvr_2dproto_2eproto.base,
  &scc_info_RequestMessage_replication_2fvr_2fvr_2dproto_2eproto.base,
  &scc_info_RequestStateTransferMessage_replication_2fvr_2fvr_2dproto_2eproto.base,
  &scc_info_StartViewChangeMessage_replication_2fvr_2fvr_2dproto_2eproto.base,
  &scc_info_StartViewMessage_replication_2fvr_2fvr_2dproto_2eproto.base,
  &scc_info_StartViewMessage_LogEntry_replication_2fvr_2fvr_2dproto_2eproto.base,
  &scc_info_StateTransferMessage_replication_2fvr_2fvr_2dproto_2eproto.base,
  &scc_info_StateTransferMessage_LogEntry_replication_2fvr_2fvr_2dproto_2eproto.base,
  &scc_info_UnloggedReplyMessage_replication_2fvr_2fvr_2dproto_2eproto.base,
  &scc_info_UnloggedRequestMessage_replication_2fvr_2fvr_2dproto_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_replication_2fvr_2fvr_2dproto_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_replication_2fvr_2fvr_2dproto_2eproto = {
  false, false, descriptor_table_protodef_replication_2fvr_2fvr_2dproto_2eproto, "replication/vr/vr-proto.proto", 1495,
  &descriptor_table_replication_2fvr_2fvr_2dproto_2eproto_once, descriptor_table_replication_2fvr_2fvr_2dproto_2eproto_sccs, descriptor_table_replication_2fvr_2fvr_2dproto_2eproto_deps, 15, 1,
  schemas, file_default_instances, TableStruct_replication_2fvr_2fvr_2dproto_2eproto::offsets,
  file_level_metadata_replication_2fvr_2fvr_2dproto_2eproto, 15, file_level_enum_descriptors_replication_2fvr_2fvr_2dproto_2eproto, file_level_service_descriptors_replication_2fvr_2fvr_2dproto_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_replication_2fvr_2fvr_2dproto_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_replication_2fvr_2fvr_2dproto_2eproto)), true);
namespace replication {
namespace vr {
namespace proto {

// ===================================================================

void RequestMessage::InitAsDefaultInstance() {
  ::replication::vr::proto::_RequestMessage_default_instance_._instance.get_mutable()->req_ = const_cast< ::replication::Request*>(
      ::replication::Request::internal_default_instance());
}
class RequestMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestMessage>()._has_bits_);
  static const ::replication::Request& req(const RequestMessage* msg);
  static void set_has_req(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::replication::Request&
RequestMessage::_Internal::req(const RequestMessage* msg) {
  return *msg->req_;
}
void RequestMessage::clear_req() {
  if (req_ != nullptr) req_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RequestMessage::RequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replication.vr.proto.RequestMessage)
}
RequestMessage::RequestMessage(const RequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_req()) {
    req_ = new ::replication::Request(*from.req_);
  } else {
    req_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:replication.vr.proto.RequestMessage)
}

void RequestMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestMessage_replication_2fvr_2fvr_2dproto_2eproto.base);
  req_ = nullptr;
}

RequestMessage::~RequestMessage() {
  // @@protoc_insertion_point(destructor:replication.vr.proto.RequestMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete req_;
}

void RequestMessage::ArenaDtor(void* object) {
  RequestMessage* _this = reinterpret_cast< RequestMessage* >(object);
  (void)_this;
}
void RequestMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestMessage& RequestMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestMessage_replication_2fvr_2fvr_2dproto_2eproto.base);
  return *internal_default_instance();
}


void RequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.vr.proto.RequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(req_ != nullptr);
    req_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .replication.Request req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.vr.proto.RequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .replication.Request req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::req(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.vr.proto.RequestMessage)
  return target;
}

size_t RequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.vr.proto.RequestMessage)
  size_t total_size = 0;

  // required .replication.Request req = 1;
  if (_internal_has_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *req_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replication.vr.proto.RequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replication.vr.proto.RequestMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replication.vr.proto.RequestMessage)
    MergeFrom(*source);
  }
}

void RequestMessage::MergeFrom(const RequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replication.vr.proto.RequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_req()) {
    _internal_mutable_req()->::replication::Request::MergeFrom(from._internal_req());
  }
}

void RequestMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replication.vr.proto.RequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestMessage::CopyFrom(const RequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.vr.proto.RequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_req()) {
    if (!req_->IsInitialized()) return false;
  }
  return true;
}

void RequestMessage::InternalSwap(RequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(req_, other->req_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplyMessage::InitAsDefaultInstance() {
}
class ReplyMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ReplyMessage>()._has_bits_);
  static void set_has_view(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_opnum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clientreqid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reply(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

ReplyMessage::ReplyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replication.vr.proto.ReplyMessage)
}
ReplyMessage::ReplyMessage(const ReplyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reply()) {
    reply_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reply(),
      GetArena());
  }
  ::memcpy(&view_, &from.view_,
    static_cast<size_t>(reinterpret_cast<char*>(&clientreqid_) -
    reinterpret_cast<char*>(&view_)) + sizeof(clientreqid_));
  // @@protoc_insertion_point(copy_constructor:replication.vr.proto.ReplyMessage)
}

void ReplyMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplyMessage_replication_2fvr_2fvr_2dproto_2eproto.base);
  reply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&view_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clientreqid_) -
      reinterpret_cast<char*>(&view_)) + sizeof(clientreqid_));
}

ReplyMessage::~ReplyMessage() {
  // @@protoc_insertion_point(destructor:replication.vr.proto.ReplyMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reply_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReplyMessage::ArenaDtor(void* object) {
  ReplyMessage* _this = reinterpret_cast< ReplyMessage* >(object);
  (void)_this;
}
void ReplyMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplyMessage& ReplyMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplyMessage_replication_2fvr_2fvr_2dproto_2eproto.base);
  return *internal_default_instance();
}


void ReplyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.vr.proto.ReplyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reply_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&view_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clientreqid_) -
        reinterpret_cast<char*>(&view_)) + sizeof(clientreqid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplyMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 view = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_view(&has_bits);
          view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 opnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_opnum(&has_bits);
          opnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 clientreqid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_clientreqid(&has_bits);
          clientreqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes reply = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reply();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplyMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.vr.proto.ReplyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 view = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_view(), target);
  }

  // required uint64 opnum = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_opnum(), target);
  }

  // required uint64 clientreqid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_clientreqid(), target);
  }

  // required bytes reply = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_reply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.vr.proto.ReplyMessage)
  return target;
}

size_t ReplyMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:replication.vr.proto.ReplyMessage)
  size_t total_size = 0;

  if (_internal_has_reply()) {
    // required bytes reply = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_reply());
  }

  if (_internal_has_view()) {
    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());
  }

  if (_internal_has_opnum()) {
    // required uint64 opnum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_opnum());
  }

  if (_internal_has_clientreqid()) {
    // required uint64 clientreqid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_clientreqid());
  }

  return total_size;
}
size_t ReplyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.vr.proto.ReplyMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes reply = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_reply());

    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());

    // required uint64 opnum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_opnum());

    // required uint64 clientreqid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_clientreqid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplyMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replication.vr.proto.ReplyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplyMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplyMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replication.vr.proto.ReplyMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replication.vr.proto.ReplyMessage)
    MergeFrom(*source);
  }
}

void ReplyMessage::MergeFrom(const ReplyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replication.vr.proto.ReplyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_reply(from._internal_reply());
    }
    if (cached_has_bits & 0x00000002u) {
      view_ = from.view_;
    }
    if (cached_has_bits & 0x00000004u) {
      opnum_ = from.opnum_;
    }
    if (cached_has_bits & 0x00000008u) {
      clientreqid_ = from.clientreqid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReplyMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replication.vr.proto.ReplyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyMessage::CopyFrom(const ReplyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.vr.proto.ReplyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ReplyMessage::InternalSwap(ReplyMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reply_.Swap(&other->reply_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplyMessage, clientreqid_)
      + sizeof(ReplyMessage::clientreqid_)
      - PROTOBUF_FIELD_OFFSET(ReplyMessage, view_)>(
          reinterpret_cast<char*>(&view_),
          reinterpret_cast<char*>(&other->view_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplyMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnloggedRequestMessage::InitAsDefaultInstance() {
  ::replication::vr::proto::_UnloggedRequestMessage_default_instance_._instance.get_mutable()->req_ = const_cast< ::replication::UnloggedRequest*>(
      ::replication::UnloggedRequest::internal_default_instance());
}
class UnloggedRequestMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<UnloggedRequestMessage>()._has_bits_);
  static const ::replication::UnloggedRequest& req(const UnloggedRequestMessage* msg);
  static void set_has_req(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::replication::UnloggedRequest&
UnloggedRequestMessage::_Internal::req(const UnloggedRequestMessage* msg) {
  return *msg->req_;
}
void UnloggedRequestMessage::clear_req() {
  if (req_ != nullptr) req_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
UnloggedRequestMessage::UnloggedRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replication.vr.proto.UnloggedRequestMessage)
}
UnloggedRequestMessage::UnloggedRequestMessage(const UnloggedRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_req()) {
    req_ = new ::replication::UnloggedRequest(*from.req_);
  } else {
    req_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:replication.vr.proto.UnloggedRequestMessage)
}

void UnloggedRequestMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnloggedRequestMessage_replication_2fvr_2fvr_2dproto_2eproto.base);
  req_ = nullptr;
}

UnloggedRequestMessage::~UnloggedRequestMessage() {
  // @@protoc_insertion_point(destructor:replication.vr.proto.UnloggedRequestMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnloggedRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete req_;
}

void UnloggedRequestMessage::ArenaDtor(void* object) {
  UnloggedRequestMessage* _this = reinterpret_cast< UnloggedRequestMessage* >(object);
  (void)_this;
}
void UnloggedRequestMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnloggedRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnloggedRequestMessage& UnloggedRequestMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnloggedRequestMessage_replication_2fvr_2fvr_2dproto_2eproto.base);
  return *internal_default_instance();
}


void UnloggedRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.vr.proto.UnloggedRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(req_ != nullptr);
    req_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnloggedRequestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .replication.UnloggedRequest req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnloggedRequestMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.vr.proto.UnloggedRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .replication.UnloggedRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::req(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.vr.proto.UnloggedRequestMessage)
  return target;
}

size_t UnloggedRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.vr.proto.UnloggedRequestMessage)
  size_t total_size = 0;

  // required .replication.UnloggedRequest req = 1;
  if (_internal_has_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *req_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnloggedRequestMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replication.vr.proto.UnloggedRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UnloggedRequestMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnloggedRequestMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replication.vr.proto.UnloggedRequestMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replication.vr.proto.UnloggedRequestMessage)
    MergeFrom(*source);
  }
}

void UnloggedRequestMessage::MergeFrom(const UnloggedRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replication.vr.proto.UnloggedRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_req()) {
    _internal_mutable_req()->::replication::UnloggedRequest::MergeFrom(from._internal_req());
  }
}

void UnloggedRequestMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replication.vr.proto.UnloggedRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnloggedRequestMessage::CopyFrom(const UnloggedRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.vr.proto.UnloggedRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnloggedRequestMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_req()) {
    if (!req_->IsInitialized()) return false;
  }
  return true;
}

void UnloggedRequestMessage::InternalSwap(UnloggedRequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(req_, other->req_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnloggedRequestMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnloggedReplyMessage::InitAsDefaultInstance() {
}
class UnloggedReplyMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<UnloggedReplyMessage>()._has_bits_);
  static void set_has_reply(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_clientreqid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

UnloggedReplyMessage::UnloggedReplyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replication.vr.proto.UnloggedReplyMessage)
}
UnloggedReplyMessage::UnloggedReplyMessage(const UnloggedReplyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reply()) {
    reply_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reply(),
      GetArena());
  }
  clientreqid_ = from.clientreqid_;
  // @@protoc_insertion_point(copy_constructor:replication.vr.proto.UnloggedReplyMessage)
}

void UnloggedReplyMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnloggedReplyMessage_replication_2fvr_2fvr_2dproto_2eproto.base);
  reply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientreqid_ = PROTOBUF_ULONGLONG(0);
}

UnloggedReplyMessage::~UnloggedReplyMessage() {
  // @@protoc_insertion_point(destructor:replication.vr.proto.UnloggedReplyMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnloggedReplyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reply_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnloggedReplyMessage::ArenaDtor(void* object) {
  UnloggedReplyMessage* _this = reinterpret_cast< UnloggedReplyMessage* >(object);
  (void)_this;
}
void UnloggedReplyMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnloggedReplyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnloggedReplyMessage& UnloggedReplyMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnloggedReplyMessage_replication_2fvr_2fvr_2dproto_2eproto.base);
  return *internal_default_instance();
}


void UnloggedReplyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.vr.proto.UnloggedReplyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reply_.ClearNonDefaultToEmpty();
  }
  clientreqid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnloggedReplyMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reply();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 clientreqid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_clientreqid(&has_bits);
          clientreqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnloggedReplyMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.vr.proto.UnloggedReplyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes reply = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_reply(), target);
  }

  // required uint64 clientreqid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_clientreqid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.vr.proto.UnloggedReplyMessage)
  return target;
}

size_t UnloggedReplyMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:replication.vr.proto.UnloggedReplyMessage)
  size_t total_size = 0;

  if (_internal_has_reply()) {
    // required bytes reply = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_reply());
  }

  if (_internal_has_clientreqid()) {
    // required uint64 clientreqid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_clientreqid());
  }

  return total_size;
}
size_t UnloggedReplyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.vr.proto.UnloggedReplyMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes reply = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_reply());

    // required uint64 clientreqid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_clientreqid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnloggedReplyMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replication.vr.proto.UnloggedReplyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UnloggedReplyMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnloggedReplyMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replication.vr.proto.UnloggedReplyMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replication.vr.proto.UnloggedReplyMessage)
    MergeFrom(*source);
  }
}

void UnloggedReplyMessage::MergeFrom(const UnloggedReplyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replication.vr.proto.UnloggedReplyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_reply(from._internal_reply());
    }
    if (cached_has_bits & 0x00000002u) {
      clientreqid_ = from.clientreqid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UnloggedReplyMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replication.vr.proto.UnloggedReplyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnloggedReplyMessage::CopyFrom(const UnloggedReplyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.vr.proto.UnloggedReplyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnloggedReplyMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UnloggedReplyMessage::InternalSwap(UnloggedReplyMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reply_.Swap(&other->reply_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(clientreqid_, other->clientreqid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnloggedReplyMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrepareMessage::InitAsDefaultInstance() {
}
class PrepareMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<PrepareMessage>()._has_bits_);
  static void set_has_view(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_opnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_batchstart(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

void PrepareMessage::clear_request() {
  request_.Clear();
}
PrepareMessage::PrepareMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  request_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replication.vr.proto.PrepareMessage)
}
PrepareMessage::PrepareMessage(const PrepareMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      request_(from.request_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&view_, &from.view_,
    static_cast<size_t>(reinterpret_cast<char*>(&batchstart_) -
    reinterpret_cast<char*>(&view_)) + sizeof(batchstart_));
  // @@protoc_insertion_point(copy_constructor:replication.vr.proto.PrepareMessage)
}

void PrepareMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareMessage_replication_2fvr_2fvr_2dproto_2eproto.base);
  ::memset(&view_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&batchstart_) -
      reinterpret_cast<char*>(&view_)) + sizeof(batchstart_));
}

PrepareMessage::~PrepareMessage() {
  // @@protoc_insertion_point(destructor:replication.vr.proto.PrepareMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PrepareMessage::ArenaDtor(void* object) {
  PrepareMessage* _this = reinterpret_cast< PrepareMessage* >(object);
  (void)_this;
}
void PrepareMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareMessage& PrepareMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareMessage_replication_2fvr_2fvr_2dproto_2eproto.base);
  return *internal_default_instance();
}


void PrepareMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.vr.proto.PrepareMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&view_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&batchstart_) -
        reinterpret_cast<char*>(&view_)) + sizeof(batchstart_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 view = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_view(&has_bits);
          view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 opnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_opnum(&has_bits);
          opnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 batchstart = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_batchstart(&has_bits);
          batchstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .replication.Request request = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_request(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.vr.proto.PrepareMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 view = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_view(), target);
  }

  // required uint64 opnum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_opnum(), target);
  }

  // required uint64 batchstart = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_batchstart(), target);
  }

  // repeated .replication.Request request = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_request_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_request(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.vr.proto.PrepareMessage)
  return target;
}

size_t PrepareMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:replication.vr.proto.PrepareMessage)
  size_t total_size = 0;

  if (_internal_has_view()) {
    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());
  }

  if (_internal_has_opnum()) {
    // required uint64 opnum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_opnum());
  }

  if (_internal_has_batchstart()) {
    // required uint64 batchstart = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_batchstart());
  }

  return total_size;
}
size_t PrepareMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.vr.proto.PrepareMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());

    // required uint64 opnum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_opnum());

    // required uint64 batchstart = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_batchstart());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .replication.Request request = 4;
  total_size += 1UL * this->_internal_request_size();
  for (const auto& msg : this->request_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replication.vr.proto.PrepareMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replication.vr.proto.PrepareMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replication.vr.proto.PrepareMessage)
    MergeFrom(*source);
  }
}

void PrepareMessage::MergeFrom(const PrepareMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replication.vr.proto.PrepareMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  request_.MergeFrom(from.request_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      view_ = from.view_;
    }
    if (cached_has_bits & 0x00000002u) {
      opnum_ = from.opnum_;
    }
    if (cached_has_bits & 0x00000004u) {
      batchstart_ = from.batchstart_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PrepareMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replication.vr.proto.PrepareMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareMessage::CopyFrom(const PrepareMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.vr.proto.PrepareMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(request_)) return false;
  return true;
}

void PrepareMessage::InternalSwap(PrepareMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  request_.InternalSwap(&other->request_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrepareMessage, batchstart_)
      + sizeof(PrepareMessage::batchstart_)
      - PROTOBUF_FIELD_OFFSET(PrepareMessage, view_)>(
          reinterpret_cast<char*>(&view_),
          reinterpret_cast<char*>(&other->view_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrepareOKMessage::InitAsDefaultInstance() {
}
class PrepareOKMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<PrepareOKMessage>()._has_bits_);
  static void set_has_view(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_opnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_replicaidx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

PrepareOKMessage::PrepareOKMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replication.vr.proto.PrepareOKMessage)
}
PrepareOKMessage::PrepareOKMessage(const PrepareOKMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&view_, &from.view_,
    static_cast<size_t>(reinterpret_cast<char*>(&replicaidx_) -
    reinterpret_cast<char*>(&view_)) + sizeof(replicaidx_));
  // @@protoc_insertion_point(copy_constructor:replication.vr.proto.PrepareOKMessage)
}

void PrepareOKMessage::SharedCtor() {
  ::memset(&view_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replicaidx_) -
      reinterpret_cast<char*>(&view_)) + sizeof(replicaidx_));
}

PrepareOKMessage::~PrepareOKMessage() {
  // @@protoc_insertion_point(destructor:replication.vr.proto.PrepareOKMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareOKMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PrepareOKMessage::ArenaDtor(void* object) {
  PrepareOKMessage* _this = reinterpret_cast< PrepareOKMessage* >(object);
  (void)_this;
}
void PrepareOKMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareOKMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareOKMessage& PrepareOKMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareOKMessage_replication_2fvr_2fvr_2dproto_2eproto.base);
  return *internal_default_instance();
}


void PrepareOKMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.vr.proto.PrepareOKMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&view_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&replicaidx_) -
        reinterpret_cast<char*>(&view_)) + sizeof(replicaidx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareOKMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 view = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_view(&has_bits);
          view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 opnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_opnum(&has_bits);
          opnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 replicaIdx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_replicaidx(&has_bits);
          replicaidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareOKMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.vr.proto.PrepareOKMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 view = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_view(), target);
  }

  // required uint64 opnum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_opnum(), target);
  }

  // required uint32 replicaIdx = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_replicaidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.vr.proto.PrepareOKMessage)
  return target;
}

size_t PrepareOKMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:replication.vr.proto.PrepareOKMessage)
  size_t total_size = 0;

  if (_internal_has_view()) {
    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());
  }

  if (_internal_has_opnum()) {
    // required uint64 opnum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_opnum());
  }

  if (_internal_has_replicaidx()) {
    // required uint32 replicaIdx = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_replicaidx());
  }

  return total_size;
}
size_t PrepareOKMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.vr.proto.PrepareOKMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());

    // required uint64 opnum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_opnum());

    // required uint32 replicaIdx = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_replicaidx());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareOKMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replication.vr.proto.PrepareOKMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareOKMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareOKMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replication.vr.proto.PrepareOKMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replication.vr.proto.PrepareOKMessage)
    MergeFrom(*source);
  }
}

void PrepareOKMessage::MergeFrom(const PrepareOKMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replication.vr.proto.PrepareOKMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      view_ = from.view_;
    }
    if (cached_has_bits & 0x00000002u) {
      opnum_ = from.opnum_;
    }
    if (cached_has_bits & 0x00000004u) {
      replicaidx_ = from.replicaidx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PrepareOKMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replication.vr.proto.PrepareOKMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareOKMessage::CopyFrom(const PrepareOKMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.vr.proto.PrepareOKMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareOKMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PrepareOKMessage::InternalSwap(PrepareOKMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrepareOKMessage, replicaidx_)
      + sizeof(PrepareOKMessage::replicaidx_)
      - PROTOBUF_FIELD_OFFSET(PrepareOKMessage, view_)>(
          reinterpret_cast<char*>(&view_),
          reinterpret_cast<char*>(&other->view_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareOKMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommitMessage::InitAsDefaultInstance() {
}
class CommitMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CommitMessage>()._has_bits_);
  static void set_has_view(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_opnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CommitMessage::CommitMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replication.vr.proto.CommitMessage)
}
CommitMessage::CommitMessage(const CommitMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&view_, &from.view_,
    static_cast<size_t>(reinterpret_cast<char*>(&opnum_) -
    reinterpret_cast<char*>(&view_)) + sizeof(opnum_));
  // @@protoc_insertion_point(copy_constructor:replication.vr.proto.CommitMessage)
}

void CommitMessage::SharedCtor() {
  ::memset(&view_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opnum_) -
      reinterpret_cast<char*>(&view_)) + sizeof(opnum_));
}

CommitMessage::~CommitMessage() {
  // @@protoc_insertion_point(destructor:replication.vr.proto.CommitMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommitMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CommitMessage::ArenaDtor(void* object) {
  CommitMessage* _this = reinterpret_cast< CommitMessage* >(object);
  (void)_this;
}
void CommitMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommitMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommitMessage& CommitMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommitMessage_replication_2fvr_2fvr_2dproto_2eproto.base);
  return *internal_default_instance();
}


void CommitMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.vr.proto.CommitMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&view_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&opnum_) -
        reinterpret_cast<char*>(&view_)) + sizeof(opnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommitMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 view = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_view(&has_bits);
          view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 opnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_opnum(&has_bits);
          opnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommitMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.vr.proto.CommitMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 view = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_view(), target);
  }

  // required uint64 opnum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_opnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.vr.proto.CommitMessage)
  return target;
}

size_t CommitMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:replication.vr.proto.CommitMessage)
  size_t total_size = 0;

  if (_internal_has_view()) {
    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());
  }

  if (_internal_has_opnum()) {
    // required uint64 opnum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_opnum());
  }

  return total_size;
}
size_t CommitMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.vr.proto.CommitMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());

    // required uint64 opnum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_opnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommitMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replication.vr.proto.CommitMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CommitMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommitMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replication.vr.proto.CommitMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replication.vr.proto.CommitMessage)
    MergeFrom(*source);
  }
}

void CommitMessage::MergeFrom(const CommitMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replication.vr.proto.CommitMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      view_ = from.view_;
    }
    if (cached_has_bits & 0x00000002u) {
      opnum_ = from.opnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommitMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replication.vr.proto.CommitMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitMessage::CopyFrom(const CommitMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.vr.proto.CommitMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CommitMessage::InternalSwap(CommitMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommitMessage, opnum_)
      + sizeof(CommitMessage::opnum_)
      - PROTOBUF_FIELD_OFFSET(CommitMessage, view_)>(
          reinterpret_cast<char*>(&view_),
          reinterpret_cast<char*>(&other->view_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommitMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestStateTransferMessage::InitAsDefaultInstance() {
}
class RequestStateTransferMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestStateTransferMessage>()._has_bits_);
  static void set_has_view(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_opnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

RequestStateTransferMessage::RequestStateTransferMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replication.vr.proto.RequestStateTransferMessage)
}
RequestStateTransferMessage::RequestStateTransferMessage(const RequestStateTransferMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&view_, &from.view_,
    static_cast<size_t>(reinterpret_cast<char*>(&opnum_) -
    reinterpret_cast<char*>(&view_)) + sizeof(opnum_));
  // @@protoc_insertion_point(copy_constructor:replication.vr.proto.RequestStateTransferMessage)
}

void RequestStateTransferMessage::SharedCtor() {
  ::memset(&view_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opnum_) -
      reinterpret_cast<char*>(&view_)) + sizeof(opnum_));
}

RequestStateTransferMessage::~RequestStateTransferMessage() {
  // @@protoc_insertion_point(destructor:replication.vr.proto.RequestStateTransferMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestStateTransferMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RequestStateTransferMessage::ArenaDtor(void* object) {
  RequestStateTransferMessage* _this = reinterpret_cast< RequestStateTransferMessage* >(object);
  (void)_this;
}
void RequestStateTransferMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestStateTransferMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestStateTransferMessage& RequestStateTransferMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestStateTransferMessage_replication_2fvr_2fvr_2dproto_2eproto.base);
  return *internal_default_instance();
}


void RequestStateTransferMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.vr.proto.RequestStateTransferMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&view_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&opnum_) -
        reinterpret_cast<char*>(&view_)) + sizeof(opnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestStateTransferMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 view = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_view(&has_bits);
          view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 opnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_opnum(&has_bits);
          opnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestStateTransferMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.vr.proto.RequestStateTransferMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 view = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_view(), target);
  }

  // required uint64 opnum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_opnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.vr.proto.RequestStateTransferMessage)
  return target;
}

size_t RequestStateTransferMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:replication.vr.proto.RequestStateTransferMessage)
  size_t total_size = 0;

  if (_internal_has_view()) {
    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());
  }

  if (_internal_has_opnum()) {
    // required uint64 opnum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_opnum());
  }

  return total_size;
}
size_t RequestStateTransferMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.vr.proto.RequestStateTransferMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());

    // required uint64 opnum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_opnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestStateTransferMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replication.vr.proto.RequestStateTransferMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestStateTransferMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestStateTransferMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replication.vr.proto.RequestStateTransferMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replication.vr.proto.RequestStateTransferMessage)
    MergeFrom(*source);
  }
}

void RequestStateTransferMessage::MergeFrom(const RequestStateTransferMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replication.vr.proto.RequestStateTransferMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      view_ = from.view_;
    }
    if (cached_has_bits & 0x00000002u) {
      opnum_ = from.opnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RequestStateTransferMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replication.vr.proto.RequestStateTransferMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestStateTransferMessage::CopyFrom(const RequestStateTransferMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.vr.proto.RequestStateTransferMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestStateTransferMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RequestStateTransferMessage::InternalSwap(RequestStateTransferMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestStateTransferMessage, opnum_)
      + sizeof(RequestStateTransferMessage::opnum_)
      - PROTOBUF_FIELD_OFFSET(RequestStateTransferMessage, view_)>(
          reinterpret_cast<char*>(&view_),
          reinterpret_cast<char*>(&other->view_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestStateTransferMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateTransferMessage_LogEntry::InitAsDefaultInstance() {
  ::replication::vr::proto::_StateTransferMessage_LogEntry_default_instance_._instance.get_mutable()->request_ = const_cast< ::replication::Request*>(
      ::replication::Request::internal_default_instance());
}
class StateTransferMessage_LogEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<StateTransferMessage_LogEntry>()._has_bits_);
  static void set_has_view(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_opnum(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::replication::Request& request(const StateTransferMessage_LogEntry* msg);
  static void set_has_request(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000e) ^ 0x0000000e) != 0;
  }
};

const ::replication::Request&
StateTransferMessage_LogEntry::_Internal::request(const StateTransferMessage_LogEntry* msg) {
  return *msg->request_;
}
void StateTransferMessage_LogEntry::clear_request() {
  if (request_ != nullptr) request_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
StateTransferMessage_LogEntry::StateTransferMessage_LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replication.vr.proto.StateTransferMessage.LogEntry)
}
StateTransferMessage_LogEntry::StateTransferMessage_LogEntry(const StateTransferMessage_LogEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hash()) {
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hash(),
      GetArena());
  }
  if (from._internal_has_request()) {
    request_ = new ::replication::Request(*from.request_);
  } else {
    request_ = nullptr;
  }
  ::memcpy(&view_, &from.view_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&view_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:replication.vr.proto.StateTransferMessage.LogEntry)
}

void StateTransferMessage_LogEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateTransferMessage_LogEntry_replication_2fvr_2fvr_2dproto_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&request_)) + sizeof(state_));
}

StateTransferMessage_LogEntry::~StateTransferMessage_LogEntry() {
  // @@protoc_insertion_point(destructor:replication.vr.proto.StateTransferMessage.LogEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StateTransferMessage_LogEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete request_;
}

void StateTransferMessage_LogEntry::ArenaDtor(void* object) {
  StateTransferMessage_LogEntry* _this = reinterpret_cast< StateTransferMessage_LogEntry* >(object);
  (void)_this;
}
void StateTransferMessage_LogEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StateTransferMessage_LogEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateTransferMessage_LogEntry& StateTransferMessage_LogEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateTransferMessage_LogEntry_replication_2fvr_2fvr_2dproto_2eproto.base);
  return *internal_default_instance();
}


void StateTransferMessage_LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.vr.proto.StateTransferMessage.LogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(request_ != nullptr);
      request_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&view_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&view_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StateTransferMessage_LogEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 view = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_view(&has_bits);
          view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 opnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_opnum(&has_bits);
          opnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .replication.Request request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StateTransferMessage_LogEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.vr.proto.StateTransferMessage.LogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 view = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_view(), target);
  }

  // required uint64 opnum = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_opnum(), target);
  }

  // required .replication.Request request = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::request(this), target, stream);
  }

  // optional uint32 state = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_state(), target);
  }

  // optional bytes hash = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.vr.proto.StateTransferMessage.LogEntry)
  return target;
}

size_t StateTransferMessage_LogEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:replication.vr.proto.StateTransferMessage.LogEntry)
  size_t total_size = 0;

  if (_internal_has_request()) {
    // required .replication.Request request = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  if (_internal_has_view()) {
    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());
  }

  if (_internal_has_opnum()) {
    // required uint64 opnum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_opnum());
  }

  return total_size;
}
size_t StateTransferMessage_LogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.vr.proto.StateTransferMessage.LogEntry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required .replication.Request request = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);

    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());

    // required uint64 opnum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_opnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes hash = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // optional uint32 state = 4;
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateTransferMessage_LogEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replication.vr.proto.StateTransferMessage.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const StateTransferMessage_LogEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateTransferMessage_LogEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replication.vr.proto.StateTransferMessage.LogEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replication.vr.proto.StateTransferMessage.LogEntry)
    MergeFrom(*source);
  }
}

void StateTransferMessage_LogEntry::MergeFrom(const StateTransferMessage_LogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replication.vr.proto.StateTransferMessage.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hash(from._internal_hash());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_request()->::replication::Request::MergeFrom(from._internal_request());
    }
    if (cached_has_bits & 0x00000004u) {
      view_ = from.view_;
    }
    if (cached_has_bits & 0x00000008u) {
      opnum_ = from.opnum_;
    }
    if (cached_has_bits & 0x00000010u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateTransferMessage_LogEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replication.vr.proto.StateTransferMessage.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateTransferMessage_LogEntry::CopyFrom(const StateTransferMessage_LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.vr.proto.StateTransferMessage.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateTransferMessage_LogEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_request()) {
    if (!request_->IsInitialized()) return false;
  }
  return true;
}

void StateTransferMessage_LogEntry::InternalSwap(StateTransferMessage_LogEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StateTransferMessage_LogEntry, state_)
      + sizeof(StateTransferMessage_LogEntry::state_)
      - PROTOBUF_FIELD_OFFSET(StateTransferMessage_LogEntry, request_)>(
          reinterpret_cast<char*>(&request_),
          reinterpret_cast<char*>(&other->request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StateTransferMessage_LogEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateTransferMessage::InitAsDefaultInstance() {
}
class StateTransferMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<StateTransferMessage>()._has_bits_);
  static void set_has_view(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_opnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

StateTransferMessage::StateTransferMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replication.vr.proto.StateTransferMessage)
}
StateTransferMessage::StateTransferMessage(const StateTransferMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&view_, &from.view_,
    static_cast<size_t>(reinterpret_cast<char*>(&opnum_) -
    reinterpret_cast<char*>(&view_)) + sizeof(opnum_));
  // @@protoc_insertion_point(copy_constructor:replication.vr.proto.StateTransferMessage)
}

void StateTransferMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateTransferMessage_replication_2fvr_2fvr_2dproto_2eproto.base);
  ::memset(&view_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opnum_) -
      reinterpret_cast<char*>(&view_)) + sizeof(opnum_));
}

StateTransferMessage::~StateTransferMessage() {
  // @@protoc_insertion_point(destructor:replication.vr.proto.StateTransferMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StateTransferMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StateTransferMessage::ArenaDtor(void* object) {
  StateTransferMessage* _this = reinterpret_cast< StateTransferMessage* >(object);
  (void)_this;
}
void StateTransferMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StateTransferMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateTransferMessage& StateTransferMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateTransferMessage_replication_2fvr_2fvr_2dproto_2eproto.base);
  return *internal_default_instance();
}


void StateTransferMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.vr.proto.StateTransferMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&view_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&opnum_) -
        reinterpret_cast<char*>(&view_)) + sizeof(opnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StateTransferMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 view = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_view(&has_bits);
          view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 opnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_opnum(&has_bits);
          opnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .replication.vr.proto.StateTransferMessage.LogEntry entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StateTransferMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.vr.proto.StateTransferMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 view = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_view(), target);
  }

  // required uint64 opnum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_opnum(), target);
  }

  // repeated .replication.vr.proto.StateTransferMessage.LogEntry entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.vr.proto.StateTransferMessage)
  return target;
}

size_t StateTransferMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:replication.vr.proto.StateTransferMessage)
  size_t total_size = 0;

  if (_internal_has_view()) {
    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());
  }

  if (_internal_has_opnum()) {
    // required uint64 opnum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_opnum());
  }

  return total_size;
}
size_t StateTransferMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.vr.proto.StateTransferMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());

    // required uint64 opnum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_opnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .replication.vr.proto.StateTransferMessage.LogEntry entries = 3;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateTransferMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replication.vr.proto.StateTransferMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const StateTransferMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateTransferMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replication.vr.proto.StateTransferMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replication.vr.proto.StateTransferMessage)
    MergeFrom(*source);
  }
}

void StateTransferMessage::MergeFrom(const StateTransferMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replication.vr.proto.StateTransferMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      view_ = from.view_;
    }
    if (cached_has_bits & 0x00000002u) {
      opnum_ = from.opnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateTransferMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replication.vr.proto.StateTransferMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateTransferMessage::CopyFrom(const StateTransferMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.vr.proto.StateTransferMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateTransferMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(entries_)) return false;
  return true;
}

void StateTransferMessage::InternalSwap(StateTransferMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entries_.InternalSwap(&other->entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StateTransferMessage, opnum_)
      + sizeof(StateTransferMessage::opnum_)
      - PROTOBUF_FIELD_OFFSET(StateTransferMessage, view_)>(
          reinterpret_cast<char*>(&view_),
          reinterpret_cast<char*>(&other->view_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StateTransferMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartViewChangeMessage::InitAsDefaultInstance() {
}
class StartViewChangeMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<StartViewChangeMessage>()._has_bits_);
  static void set_has_view(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_replicaidx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lastcommitted(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

StartViewChangeMessage::StartViewChangeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replication.vr.proto.StartViewChangeMessage)
}
StartViewChangeMessage::StartViewChangeMessage(const StartViewChangeMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&view_, &from.view_,
    static_cast<size_t>(reinterpret_cast<char*>(&replicaidx_) -
    reinterpret_cast<char*>(&view_)) + sizeof(replicaidx_));
  // @@protoc_insertion_point(copy_constructor:replication.vr.proto.StartViewChangeMessage)
}

void StartViewChangeMessage::SharedCtor() {
  ::memset(&view_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replicaidx_) -
      reinterpret_cast<char*>(&view_)) + sizeof(replicaidx_));
}

StartViewChangeMessage::~StartViewChangeMessage() {
  // @@protoc_insertion_point(destructor:replication.vr.proto.StartViewChangeMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartViewChangeMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StartViewChangeMessage::ArenaDtor(void* object) {
  StartViewChangeMessage* _this = reinterpret_cast< StartViewChangeMessage* >(object);
  (void)_this;
}
void StartViewChangeMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartViewChangeMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartViewChangeMessage& StartViewChangeMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartViewChangeMessage_replication_2fvr_2fvr_2dproto_2eproto.base);
  return *internal_default_instance();
}


void StartViewChangeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.vr.proto.StartViewChangeMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&view_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&replicaidx_) -
        reinterpret_cast<char*>(&view_)) + sizeof(replicaidx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartViewChangeMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 view = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_view(&has_bits);
          view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 replicaIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_replicaidx(&has_bits);
          replicaidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 lastCommitted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_lastcommitted(&has_bits);
          lastcommitted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartViewChangeMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.vr.proto.StartViewChangeMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 view = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_view(), target);
  }

  // required uint32 replicaIdx = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_replicaidx(), target);
  }

  // required uint64 lastCommitted = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_lastcommitted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.vr.proto.StartViewChangeMessage)
  return target;
}

size_t StartViewChangeMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:replication.vr.proto.StartViewChangeMessage)
  size_t total_size = 0;

  if (_internal_has_view()) {
    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());
  }

  if (_internal_has_lastcommitted()) {
    // required uint64 lastCommitted = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lastcommitted());
  }

  if (_internal_has_replicaidx()) {
    // required uint32 replicaIdx = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_replicaidx());
  }

  return total_size;
}
size_t StartViewChangeMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.vr.proto.StartViewChangeMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());

    // required uint64 lastCommitted = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lastcommitted());

    // required uint32 replicaIdx = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_replicaidx());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartViewChangeMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replication.vr.proto.StartViewChangeMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const StartViewChangeMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartViewChangeMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replication.vr.proto.StartViewChangeMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replication.vr.proto.StartViewChangeMessage)
    MergeFrom(*source);
  }
}

void StartViewChangeMessage::MergeFrom(const StartViewChangeMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replication.vr.proto.StartViewChangeMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      view_ = from.view_;
    }
    if (cached_has_bits & 0x00000002u) {
      lastcommitted_ = from.lastcommitted_;
    }
    if (cached_has_bits & 0x00000004u) {
      replicaidx_ = from.replicaidx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StartViewChangeMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replication.vr.proto.StartViewChangeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartViewChangeMessage::CopyFrom(const StartViewChangeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.vr.proto.StartViewChangeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartViewChangeMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void StartViewChangeMessage::InternalSwap(StartViewChangeMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartViewChangeMessage, replicaidx_)
      + sizeof(StartViewChangeMessage::replicaidx_)
      - PROTOBUF_FIELD_OFFSET(StartViewChangeMessage, view_)>(
          reinterpret_cast<char*>(&view_),
          reinterpret_cast<char*>(&other->view_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartViewChangeMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DoViewChangeMessage_LogEntry::InitAsDefaultInstance() {
  ::replication::vr::proto::_DoViewChangeMessage_LogEntry_default_instance_._instance.get_mutable()->request_ = const_cast< ::replication::Request*>(
      ::replication::Request::internal_default_instance());
}
class DoViewChangeMessage_LogEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<DoViewChangeMessage_LogEntry>()._has_bits_);
  static void set_has_view(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_opnum(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::replication::Request& request(const DoViewChangeMessage_LogEntry* msg);
  static void set_has_request(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000e) ^ 0x0000000e) != 0;
  }
};

const ::replication::Request&
DoViewChangeMessage_LogEntry::_Internal::request(const DoViewChangeMessage_LogEntry* msg) {
  return *msg->request_;
}
void DoViewChangeMessage_LogEntry::clear_request() {
  if (request_ != nullptr) request_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
DoViewChangeMessage_LogEntry::DoViewChangeMessage_LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replication.vr.proto.DoViewChangeMessage.LogEntry)
}
DoViewChangeMessage_LogEntry::DoViewChangeMessage_LogEntry(const DoViewChangeMessage_LogEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hash()) {
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hash(),
      GetArena());
  }
  if (from._internal_has_request()) {
    request_ = new ::replication::Request(*from.request_);
  } else {
    request_ = nullptr;
  }
  ::memcpy(&view_, &from.view_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&view_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:replication.vr.proto.DoViewChangeMessage.LogEntry)
}

void DoViewChangeMessage_LogEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoViewChangeMessage_LogEntry_replication_2fvr_2fvr_2dproto_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&request_)) + sizeof(state_));
}

DoViewChangeMessage_LogEntry::~DoViewChangeMessage_LogEntry() {
  // @@protoc_insertion_point(destructor:replication.vr.proto.DoViewChangeMessage.LogEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DoViewChangeMessage_LogEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete request_;
}

void DoViewChangeMessage_LogEntry::ArenaDtor(void* object) {
  DoViewChangeMessage_LogEntry* _this = reinterpret_cast< DoViewChangeMessage_LogEntry* >(object);
  (void)_this;
}
void DoViewChangeMessage_LogEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DoViewChangeMessage_LogEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoViewChangeMessage_LogEntry& DoViewChangeMessage_LogEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoViewChangeMessage_LogEntry_replication_2fvr_2fvr_2dproto_2eproto.base);
  return *internal_default_instance();
}


void DoViewChangeMessage_LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.vr.proto.DoViewChangeMessage.LogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(request_ != nullptr);
      request_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&view_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&view_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoViewChangeMessage_LogEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 view = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_view(&has_bits);
          view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 opnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_opnum(&has_bits);
          opnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .replication.Request request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoViewChangeMessage_LogEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.vr.proto.DoViewChangeMessage.LogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 view = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_view(), target);
  }

  // required uint64 opnum = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_opnum(), target);
  }

  // required .replication.Request request = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::request(this), target, stream);
  }

  // optional uint32 state = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_state(), target);
  }

  // optional bytes hash = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.vr.proto.DoViewChangeMessage.LogEntry)
  return target;
}

size_t DoViewChangeMessage_LogEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:replication.vr.proto.DoViewChangeMessage.LogEntry)
  size_t total_size = 0;

  if (_internal_has_request()) {
    // required .replication.Request request = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  if (_internal_has_view()) {
    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());
  }

  if (_internal_has_opnum()) {
    // required uint64 opnum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_opnum());
  }

  return total_size;
}
size_t DoViewChangeMessage_LogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.vr.proto.DoViewChangeMessage.LogEntry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required .replication.Request request = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);

    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());

    // required uint64 opnum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_opnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes hash = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // optional uint32 state = 4;
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoViewChangeMessage_LogEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replication.vr.proto.DoViewChangeMessage.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const DoViewChangeMessage_LogEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoViewChangeMessage_LogEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replication.vr.proto.DoViewChangeMessage.LogEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replication.vr.proto.DoViewChangeMessage.LogEntry)
    MergeFrom(*source);
  }
}

void DoViewChangeMessage_LogEntry::MergeFrom(const DoViewChangeMessage_LogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replication.vr.proto.DoViewChangeMessage.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hash(from._internal_hash());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_request()->::replication::Request::MergeFrom(from._internal_request());
    }
    if (cached_has_bits & 0x00000004u) {
      view_ = from.view_;
    }
    if (cached_has_bits & 0x00000008u) {
      opnum_ = from.opnum_;
    }
    if (cached_has_bits & 0x00000010u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DoViewChangeMessage_LogEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replication.vr.proto.DoViewChangeMessage.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoViewChangeMessage_LogEntry::CopyFrom(const DoViewChangeMessage_LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.vr.proto.DoViewChangeMessage.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoViewChangeMessage_LogEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_request()) {
    if (!request_->IsInitialized()) return false;
  }
  return true;
}

void DoViewChangeMessage_LogEntry::InternalSwap(DoViewChangeMessage_LogEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DoViewChangeMessage_LogEntry, state_)
      + sizeof(DoViewChangeMessage_LogEntry::state_)
      - PROTOBUF_FIELD_OFFSET(DoViewChangeMessage_LogEntry, request_)>(
          reinterpret_cast<char*>(&request_),
          reinterpret_cast<char*>(&other->request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DoViewChangeMessage_LogEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DoViewChangeMessage::InitAsDefaultInstance() {
}
class DoViewChangeMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<DoViewChangeMessage>()._has_bits_);
  static void set_has_view(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lastnormalview(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lastop(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lastcommitted(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_replicaidx(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

DoViewChangeMessage::DoViewChangeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replication.vr.proto.DoViewChangeMessage)
}
DoViewChangeMessage::DoViewChangeMessage(const DoViewChangeMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&view_, &from.view_,
    static_cast<size_t>(reinterpret_cast<char*>(&replicaidx_) -
    reinterpret_cast<char*>(&view_)) + sizeof(replicaidx_));
  // @@protoc_insertion_point(copy_constructor:replication.vr.proto.DoViewChangeMessage)
}

void DoViewChangeMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoViewChangeMessage_replication_2fvr_2fvr_2dproto_2eproto.base);
  ::memset(&view_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replicaidx_) -
      reinterpret_cast<char*>(&view_)) + sizeof(replicaidx_));
}

DoViewChangeMessage::~DoViewChangeMessage() {
  // @@protoc_insertion_point(destructor:replication.vr.proto.DoViewChangeMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DoViewChangeMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DoViewChangeMessage::ArenaDtor(void* object) {
  DoViewChangeMessage* _this = reinterpret_cast< DoViewChangeMessage* >(object);
  (void)_this;
}
void DoViewChangeMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DoViewChangeMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoViewChangeMessage& DoViewChangeMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoViewChangeMessage_replication_2fvr_2fvr_2dproto_2eproto.base);
  return *internal_default_instance();
}


void DoViewChangeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.vr.proto.DoViewChangeMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&view_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&replicaidx_) -
        reinterpret_cast<char*>(&view_)) + sizeof(replicaidx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoViewChangeMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 view = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_view(&has_bits);
          view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 lastNormalView = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lastnormalview(&has_bits);
          lastnormalview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 lastOp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_lastop(&has_bits);
          lastop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 lastCommitted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_lastcommitted(&has_bits);
          lastcommitted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .replication.vr.proto.DoViewChangeMessage.LogEntry entries = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // required uint32 replicaIdx = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_replicaidx(&has_bits);
          replicaidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoViewChangeMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.vr.proto.DoViewChangeMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 view = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_view(), target);
  }

  // required uint64 lastNormalView = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_lastnormalview(), target);
  }

  // required uint64 lastOp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_lastop(), target);
  }

  // required uint64 lastCommitted = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_lastcommitted(), target);
  }

  // repeated .replication.vr.proto.DoViewChangeMessage.LogEntry entries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_entries(i), target, stream);
  }

  // required uint32 replicaIdx = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_replicaidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.vr.proto.DoViewChangeMessage)
  return target;
}

size_t DoViewChangeMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:replication.vr.proto.DoViewChangeMessage)
  size_t total_size = 0;

  if (_internal_has_view()) {
    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());
  }

  if (_internal_has_lastnormalview()) {
    // required uint64 lastNormalView = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lastnormalview());
  }

  if (_internal_has_lastop()) {
    // required uint64 lastOp = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lastop());
  }

  if (_internal_has_lastcommitted()) {
    // required uint64 lastCommitted = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lastcommitted());
  }

  if (_internal_has_replicaidx()) {
    // required uint32 replicaIdx = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_replicaidx());
  }

  return total_size;
}
size_t DoViewChangeMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.vr.proto.DoViewChangeMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());

    // required uint64 lastNormalView = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lastnormalview());

    // required uint64 lastOp = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lastop());

    // required uint64 lastCommitted = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lastcommitted());

    // required uint32 replicaIdx = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_replicaidx());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .replication.vr.proto.DoViewChangeMessage.LogEntry entries = 5;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoViewChangeMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replication.vr.proto.DoViewChangeMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DoViewChangeMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoViewChangeMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replication.vr.proto.DoViewChangeMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replication.vr.proto.DoViewChangeMessage)
    MergeFrom(*source);
  }
}

void DoViewChangeMessage::MergeFrom(const DoViewChangeMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replication.vr.proto.DoViewChangeMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      view_ = from.view_;
    }
    if (cached_has_bits & 0x00000002u) {
      lastnormalview_ = from.lastnormalview_;
    }
    if (cached_has_bits & 0x00000004u) {
      lastop_ = from.lastop_;
    }
    if (cached_has_bits & 0x00000008u) {
      lastcommitted_ = from.lastcommitted_;
    }
    if (cached_has_bits & 0x00000010u) {
      replicaidx_ = from.replicaidx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DoViewChangeMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replication.vr.proto.DoViewChangeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoViewChangeMessage::CopyFrom(const DoViewChangeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.vr.proto.DoViewChangeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoViewChangeMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(entries_)) return false;
  return true;
}

void DoViewChangeMessage::InternalSwap(DoViewChangeMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entries_.InternalSwap(&other->entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DoViewChangeMessage, replicaidx_)
      + sizeof(DoViewChangeMessage::replicaidx_)
      - PROTOBUF_FIELD_OFFSET(DoViewChangeMessage, view_)>(
          reinterpret_cast<char*>(&view_),
          reinterpret_cast<char*>(&other->view_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DoViewChangeMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartViewMessage_LogEntry::InitAsDefaultInstance() {
  ::replication::vr::proto::_StartViewMessage_LogEntry_default_instance_._instance.get_mutable()->request_ = const_cast< ::replication::Request*>(
      ::replication::Request::internal_default_instance());
}
class StartViewMessage_LogEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<StartViewMessage_LogEntry>()._has_bits_);
  static void set_has_view(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_opnum(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::replication::Request& request(const StartViewMessage_LogEntry* msg);
  static void set_has_request(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000e) ^ 0x0000000e) != 0;
  }
};

const ::replication::Request&
StartViewMessage_LogEntry::_Internal::request(const StartViewMessage_LogEntry* msg) {
  return *msg->request_;
}
void StartViewMessage_LogEntry::clear_request() {
  if (request_ != nullptr) request_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
StartViewMessage_LogEntry::StartViewMessage_LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replication.vr.proto.StartViewMessage.LogEntry)
}
StartViewMessage_LogEntry::StartViewMessage_LogEntry(const StartViewMessage_LogEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hash()) {
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hash(),
      GetArena());
  }
  if (from._internal_has_request()) {
    request_ = new ::replication::Request(*from.request_);
  } else {
    request_ = nullptr;
  }
  ::memcpy(&view_, &from.view_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&view_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:replication.vr.proto.StartViewMessage.LogEntry)
}

void StartViewMessage_LogEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartViewMessage_LogEntry_replication_2fvr_2fvr_2dproto_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&request_)) + sizeof(state_));
}

StartViewMessage_LogEntry::~StartViewMessage_LogEntry() {
  // @@protoc_insertion_point(destructor:replication.vr.proto.StartViewMessage.LogEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartViewMessage_LogEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete request_;
}

void StartViewMessage_LogEntry::ArenaDtor(void* object) {
  StartViewMessage_LogEntry* _this = reinterpret_cast< StartViewMessage_LogEntry* >(object);
  (void)_this;
}
void StartViewMessage_LogEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartViewMessage_LogEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartViewMessage_LogEntry& StartViewMessage_LogEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartViewMessage_LogEntry_replication_2fvr_2fvr_2dproto_2eproto.base);
  return *internal_default_instance();
}


void StartViewMessage_LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.vr.proto.StartViewMessage.LogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(request_ != nullptr);
      request_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&view_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&view_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartViewMessage_LogEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 view = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_view(&has_bits);
          view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 opnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_opnum(&has_bits);
          opnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .replication.Request request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartViewMessage_LogEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.vr.proto.StartViewMessage.LogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 view = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_view(), target);
  }

  // required uint64 opnum = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_opnum(), target);
  }

  // required .replication.Request request = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::request(this), target, stream);
  }

  // optional uint32 state = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_state(), target);
  }

  // optional bytes hash = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.vr.proto.StartViewMessage.LogEntry)
  return target;
}

size_t StartViewMessage_LogEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:replication.vr.proto.StartViewMessage.LogEntry)
  size_t total_size = 0;

  if (_internal_has_request()) {
    // required .replication.Request request = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  if (_internal_has_view()) {
    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());
  }

  if (_internal_has_opnum()) {
    // required uint64 opnum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_opnum());
  }

  return total_size;
}
size_t StartViewMessage_LogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.vr.proto.StartViewMessage.LogEntry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required .replication.Request request = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);

    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());

    // required uint64 opnum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_opnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes hash = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // optional uint32 state = 4;
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartViewMessage_LogEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replication.vr.proto.StartViewMessage.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const StartViewMessage_LogEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartViewMessage_LogEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replication.vr.proto.StartViewMessage.LogEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replication.vr.proto.StartViewMessage.LogEntry)
    MergeFrom(*source);
  }
}

void StartViewMessage_LogEntry::MergeFrom(const StartViewMessage_LogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replication.vr.proto.StartViewMessage.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hash(from._internal_hash());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_request()->::replication::Request::MergeFrom(from._internal_request());
    }
    if (cached_has_bits & 0x00000004u) {
      view_ = from.view_;
    }
    if (cached_has_bits & 0x00000008u) {
      opnum_ = from.opnum_;
    }
    if (cached_has_bits & 0x00000010u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StartViewMessage_LogEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replication.vr.proto.StartViewMessage.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartViewMessage_LogEntry::CopyFrom(const StartViewMessage_LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.vr.proto.StartViewMessage.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartViewMessage_LogEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_request()) {
    if (!request_->IsInitialized()) return false;
  }
  return true;
}

void StartViewMessage_LogEntry::InternalSwap(StartViewMessage_LogEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartViewMessage_LogEntry, state_)
      + sizeof(StartViewMessage_LogEntry::state_)
      - PROTOBUF_FIELD_OFFSET(StartViewMessage_LogEntry, request_)>(
          reinterpret_cast<char*>(&request_),
          reinterpret_cast<char*>(&other->request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartViewMessage_LogEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartViewMessage::InitAsDefaultInstance() {
}
class StartViewMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<StartViewMessage>()._has_bits_);
  static void set_has_view(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lastop(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lastcommitted(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

StartViewMessage::StartViewMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replication.vr.proto.StartViewMessage)
}
StartViewMessage::StartViewMessage(const StartViewMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&view_, &from.view_,
    static_cast<size_t>(reinterpret_cast<char*>(&lastcommitted_) -
    reinterpret_cast<char*>(&view_)) + sizeof(lastcommitted_));
  // @@protoc_insertion_point(copy_constructor:replication.vr.proto.StartViewMessage)
}

void StartViewMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartViewMessage_replication_2fvr_2fvr_2dproto_2eproto.base);
  ::memset(&view_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastcommitted_) -
      reinterpret_cast<char*>(&view_)) + sizeof(lastcommitted_));
}

StartViewMessage::~StartViewMessage() {
  // @@protoc_insertion_point(destructor:replication.vr.proto.StartViewMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartViewMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StartViewMessage::ArenaDtor(void* object) {
  StartViewMessage* _this = reinterpret_cast< StartViewMessage* >(object);
  (void)_this;
}
void StartViewMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartViewMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartViewMessage& StartViewMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartViewMessage_replication_2fvr_2fvr_2dproto_2eproto.base);
  return *internal_default_instance();
}


void StartViewMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.vr.proto.StartViewMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&view_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lastcommitted_) -
        reinterpret_cast<char*>(&view_)) + sizeof(lastcommitted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartViewMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 view = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_view(&has_bits);
          view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 lastOp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lastop(&has_bits);
          lastop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 lastCommitted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_lastcommitted(&has_bits);
          lastcommitted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .replication.vr.proto.StartViewMessage.LogEntry entries = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartViewMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.vr.proto.StartViewMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 view = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_view(), target);
  }

  // required uint64 lastOp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_lastop(), target);
  }

  // required uint64 lastCommitted = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_lastcommitted(), target);
  }

  // repeated .replication.vr.proto.StartViewMessage.LogEntry entries = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.vr.proto.StartViewMessage)
  return target;
}

size_t StartViewMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:replication.vr.proto.StartViewMessage)
  size_t total_size = 0;

  if (_internal_has_view()) {
    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());
  }

  if (_internal_has_lastop()) {
    // required uint64 lastOp = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lastop());
  }

  if (_internal_has_lastcommitted()) {
    // required uint64 lastCommitted = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lastcommitted());
  }

  return total_size;
}
size_t StartViewMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.vr.proto.StartViewMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 view = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_view());

    // required uint64 lastOp = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lastop());

    // required uint64 lastCommitted = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lastcommitted());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .replication.vr.proto.StartViewMessage.LogEntry entries = 4;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartViewMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replication.vr.proto.StartViewMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const StartViewMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartViewMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replication.vr.proto.StartViewMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replication.vr.proto.StartViewMessage)
    MergeFrom(*source);
  }
}

void StartViewMessage::MergeFrom(const StartViewMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replication.vr.proto.StartViewMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      view_ = from.view_;
    }
    if (cached_has_bits & 0x00000002u) {
      lastop_ = from.lastop_;
    }
    if (cached_has_bits & 0x00000004u) {
      lastcommitted_ = from.lastcommitted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StartViewMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replication.vr.proto.StartViewMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartViewMessage::CopyFrom(const StartViewMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.vr.proto.StartViewMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartViewMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(entries_)) return false;
  return true;
}

void StartViewMessage::InternalSwap(StartViewMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entries_.InternalSwap(&other->entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartViewMessage, lastcommitted_)
      + sizeof(StartViewMessage::lastcommitted_)
      - PROTOBUF_FIELD_OFFSET(StartViewMessage, view_)>(
          reinterpret_cast<char*>(&view_),
          reinterpret_cast<char*>(&other->view_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartViewMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace vr
}  // namespace replication
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::replication::vr::proto::RequestMessage* Arena::CreateMaybeMessage< ::replication::vr::proto::RequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::vr::proto::RequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::vr::proto::ReplyMessage* Arena::CreateMaybeMessage< ::replication::vr::proto::ReplyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::vr::proto::ReplyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::vr::proto::UnloggedRequestMessage* Arena::CreateMaybeMessage< ::replication::vr::proto::UnloggedRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::vr::proto::UnloggedRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::vr::proto::UnloggedReplyMessage* Arena::CreateMaybeMessage< ::replication::vr::proto::UnloggedReplyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::vr::proto::UnloggedReplyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::vr::proto::PrepareMessage* Arena::CreateMaybeMessage< ::replication::vr::proto::PrepareMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::vr::proto::PrepareMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::vr::proto::PrepareOKMessage* Arena::CreateMaybeMessage< ::replication::vr::proto::PrepareOKMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::vr::proto::PrepareOKMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::vr::proto::CommitMessage* Arena::CreateMaybeMessage< ::replication::vr::proto::CommitMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::vr::proto::CommitMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::vr::proto::RequestStateTransferMessage* Arena::CreateMaybeMessage< ::replication::vr::proto::RequestStateTransferMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::vr::proto::RequestStateTransferMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::vr::proto::StateTransferMessage_LogEntry* Arena::CreateMaybeMessage< ::replication::vr::proto::StateTransferMessage_LogEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::vr::proto::StateTransferMessage_LogEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::vr::proto::StateTransferMessage* Arena::CreateMaybeMessage< ::replication::vr::proto::StateTransferMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::vr::proto::StateTransferMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::vr::proto::StartViewChangeMessage* Arena::CreateMaybeMessage< ::replication::vr::proto::StartViewChangeMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::vr::proto::StartViewChangeMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::vr::proto::DoViewChangeMessage_LogEntry* Arena::CreateMaybeMessage< ::replication::vr::proto::DoViewChangeMessage_LogEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::vr::proto::DoViewChangeMessage_LogEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::vr::proto::DoViewChangeMessage* Arena::CreateMaybeMessage< ::replication::vr::proto::DoViewChangeMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::vr::proto::DoViewChangeMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::vr::proto::StartViewMessage_LogEntry* Arena::CreateMaybeMessage< ::replication::vr::proto::StartViewMessage_LogEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::vr::proto::StartViewMessage_LogEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::vr::proto::StartViewMessage* Arena::CreateMaybeMessage< ::replication::vr::proto::StartViewMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::vr::proto::StartViewMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
